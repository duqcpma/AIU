/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aiuwithtrees;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Scanner;
import java.util.Stack;
import javafx.application.Application;
import static javafx.application.Application.launch;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.Separator;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import static javafx.scene.control.TabPane.TabClosingPolicy.UNAVAILABLE;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;

/**
 *
 * @author mguyer92
 */
final class Notes {

    public String notes;
    public Date date;

    public Notes(String theNotes) {
        notes = theNotes;
        date = new Date();
    }

    public Notes(String theNotes, long time) {
        notes = theNotes;
        date = new Date(time);
    }
}

enum GoalType {

    CIVICS, JOB, POSTSEC, OTHER
};

final class Goal {

    public String goal;
    public ArrayList<Subgoal> subgoals = new ArrayList<Subgoal>();

    public Goal(String theGoal) {
        goal = theGoal;
    }

    //public enum GoalType{CIVICS,JOB,POSTSEC}
    public GoalType goalType;

    public Goal(Goal theGoal) {
        goal = theGoal.goal;
        ArrayList<Subgoal> subgoalsCopy = new ArrayList<Subgoal>();
        for (Subgoal subgoal : theGoal.subgoals) {
            Subgoal subgoalCopy = new Subgoal(subgoal.subgoal);
            subgoalCopy.setComplete(subgoal.isComplete);
            subgoalsCopy.add(subgoalCopy);
        }
        subgoals = subgoalsCopy;
        goalType = theGoal.goalType;
    }

    public int numCompletedSubgoals() {
        int count = 0;
        for (Subgoal subgoal : this.subgoals) {
            if (subgoal.isComplete) {
                count++;
            }
        }
        return count;
    }

    public void addSubgoal(Subgoal subgoal) {
        subgoals.add(subgoal);
    }

    public void removeSubgoal(Subgoal subgoal) {
        subgoals.remove(subgoal);
    }
}

final class Subgoal {

    public String subgoal;
    public boolean isComplete;

    public Subgoal(String theSubgoal) {
        subgoal = theSubgoal;
        isComplete = false;
    }

    public Subgoal(Subgoal theSubgoal) {
        subgoal = theSubgoal.subgoal;
        isComplete = theSubgoal.isComplete;
    }

    public void setComplete(boolean b) {
        isComplete = b;
    }
}

final class Student {

    public String lastName;
    public String firstName;
    public String phoneNumber;
    public String emailAddress;
    public Date lastUpdate;
    public Notes notes;
    public int goalsCompleted = 0;

    public Goal goal;
    public Goal secondGoal;
    public ArrayList<Goal> completedGoals;

    public Student(String theLastName, String theFirstName, String thePhoneNumber, String theEmail,
            Goal theGoal, Notes theNotes) {
        lastName = theLastName;
        firstName = theFirstName;
        phoneNumber = thePhoneNumber;
        emailAddress = theEmail;
        lastUpdate = new Date();
        goal = theGoal;
        notes = theNotes;
    }

    public Student(String theLastName, String theFirstName, String thePhoneNumber, String theEmail,
            long lastUpdateTime, Goal theGoal, Notes theNotes) {
        lastName = theLastName;
        firstName = theFirstName;
        phoneNumber = thePhoneNumber;
        emailAddress = theEmail;
        lastUpdate = new Date(lastUpdateTime);
        goal = theGoal;
        notes = theNotes;
    }

    public void setSecondGoal(Goal theSecondGoal) {
        secondGoal = theSecondGoal;
    }

    public String getLastName() {
        return this.lastName;
    }

    public String getFirstName() {
        return this.firstName;
    }

    public String getFullName() {
        return (this.lastName + ", " + this.firstName);
    }

    public String getPhoneNumber() {
        return this.phoneNumber;
    }

    public String getEmail() {
        return this.emailAddress;
    }

    public String getNotes() {
        return this.notes.notes;
    }

    public String toString() {
        String str = this.lastName + ", " + this.firstName + System.getProperty("line.separator") + this.phoneNumber + "   " + this.emailAddress
                + System.getProperty("line.separator") + "Goal:" + this.goal.goal + System.getProperty("line.separator") + "Notes: " + this.notes;
        System.out.println(str);
        return str;
    }

}

final class TabDemo extends Application {

    public static TwoKeyTree<String, String, Student> database;

    public static AIUTree<String, Goal> goalTree;

    public static AIUTree<String, UserAndPass> userTree;

    public static UserAndPass currentUser;

    public boolean isAdmin = false;

    public static Date launchTime = new Date();

    public static String administrativeNotes;

    public String goalBackup;
    public String secondGoalBackup;
    
    public void setAdmin(boolean b) {
        this.isAdmin = b;
    }

    public TabDemo(TwoKeyTree<String, String, Student> theDatabase,
            AIUTree<String, Goal> theGoalTree, AIUTree<String, UserAndPass> theUserTree,
            UserAndPass theCurrentUser, String theAdminNotes) {
        database = theDatabase;
        goalTree = theGoalTree;
        userTree = theUserTree;
        currentUser = theCurrentUser;
        administrativeNotes = theAdminNotes;
    }

    //public String convertDate() {};
    public static void saveTree() {
        AIUTreeIterator iterator = new AIUTreeIterator(database.tree1);
        try {

            String content = "";

            while (iterator.hasNext()) {
                Node<String, Student> currNode = iterator.next();
                String notes;
                if (currNode.data.notes.notes.length() == 0) {
                    notes = " ";
                } else {
                    notes = currNode.data.notes.notes.replaceAll("\\n", "\\\\n");
                }
                Goal goal1 = currNode.data.goal;
                Goal goal2 = currNode.data.secondGoal;

                String secondGoalString;

                if (goal2 != null) {
                    secondGoalString = goal2.goal;
                } else {
                    secondGoalString = " ";
                }

                String[] sub1 = new String[20];
                String[] sub2 = new String[20];

                int size1 = goal1.subgoals.size();

                if (size1 > 0) {
                    for (int i = 0; i < size1; i++) {
                        if (goal1.subgoals.get(i).isComplete) {
                            sub1[i] = "1";
                        } else {
                            sub1[i] = "0";
                        }
                    }
                }

                for (int i = size1; i < 20; i++) {
                    sub1[i] = " ";
                }

                if (goal2 != null) {
                    int size2 = goal2.subgoals.size();
                    if (size2 > 0) {
                        for (int i = 0; i < size2; i++) {
                            if (goal2.subgoals.get(i).isComplete) {
                                sub2[i] = "1";
                            } else {
                                sub2[i] = "0";
                            }
                        }
                    }
                    for (int i = size2; i < 20; i++) {
                        sub2[i] = " ";
                    }
                } else {
                    for (int i = 0; i < 20; i++) {
                        sub2[i] = " ";
                    }
                }

                content = content + currNode.data.lastName + "," + currNode.data.phoneNumber.replaceAll("\\D+", "") + "," + currNode.data.lastName + ","
                        + currNode.data.firstName + "," + currNode.data.phoneNumber + "," + currNode.data.emailAddress + "," + currNode.data.lastUpdate.getTime() + "," + goal1.goal + "," + secondGoalString + ","
                        + currNode.data.goalsCompleted + "," + notes + "," + currNode.data.notes.date.getTime() + "," + sub1[0] + "," + sub1[1] + "," + sub1[2] + "," + sub1[3] + ","
                        + sub1[4] + "," + sub1[5] + "," + sub1[6] + "," + sub1[7] + "," + sub1[8] + "," + sub1[9] + "," + sub1[10] + ","
                        + sub1[11] + "," + sub1[12] + "," + sub1[13] + "," + sub1[14] + "," + sub1[15] + "," + sub1[16] + "," + sub1[17] + "," + sub1[18] + ","
                        + sub1[19] + "," + sub2[0] + "," + sub2[1] + "," + sub2[2] + "," + sub2[3] + "," + sub2[4] + "," + sub2[5] + "," + sub2[6] + ","
                        + sub2[7] + "," + sub2[8] + "," + sub2[9] + "," + sub2[10] + "," + sub2[11] + "," + sub2[12] + "," + sub2[13] + "," + sub2[14] + ","
                        + sub2[15] + "," + sub2[16] + "," + sub2[17] + "," + sub2[18] + "," + sub2[19] + System.getProperty("line.separator");
            }

            File file = new File("C:\\Users\\" + System.getProperty("user.name") + "\\Google Drive\\database.txt");

            // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(content);
            bw.close();

            System.out.println("Database saved successfully.");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void saveGoalTree() {
        AIUTreeIterator iterator = new AIUTreeIterator(goalTree);
        try {

            String content = "";

            while (iterator.hasNext()) {
                Node<String, Goal> currNode = iterator.next();
                String[] temp = new String[20];
                for (int i = 0; i < 20; i++) {
                    if (i < currNode.data.subgoals.size()) {
                        temp[i] = currNode.data.subgoals.get(i).subgoal;
                    } else {
                        temp[i] = " ";
                    }
                }
                String goalTypeString;
                GoalType goalType = currNode.data.goalType;
                if (goalType == GoalType.CIVICS) {
                    goalTypeString = "civics";
                } else if (goalType == GoalType.JOB) {
                    goalTypeString = "job";
                } else if (goalType == GoalType.POSTSEC) {
                    goalTypeString = "postsec";
                } else {
                    goalTypeString = "other";
                }
                content = content + currNode.data.goal + "," + goalTypeString + "," + temp[0] + "," + temp[1] + "," + temp[2] + "," + temp[3]
                        + "," + temp[4] + "," + temp[5] + "," + temp[6]
                        + "," + temp[7] + "," + temp[8] + "," + temp[9]
                        + "," + temp[10] + "," + temp[11] + "," + temp[12] + "," + temp[13]
                        + "," + temp[14] + "," + temp[15] + "," + temp[16]
                        + "," + temp[17] + "," + temp[18] + "," + temp[19] + System.getProperty("line.separator");
            }

            File file = new File("C:\\Users\\" + System.getProperty("user.name") + "\\Google Drive\\goals.txt");

            // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(content);
            bw.close();

            System.out.println("Goals saved successfully.");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void saveUserTree() {
        AIUTreeIterator iterator = new AIUTreeIterator(userTree);
        try {

            String content = "";

            while (iterator.hasNext()) {
                Node<String, UserAndPass> currNode = iterator.next();
                String isAdmin = "0";
                if (currNode.data.isAdmin) {
                    isAdmin = "1";
                }
                if (currNode.data.username.equals(currentUser.username)) {
                    content = content + currNode.data.username + "," + currNode.data.password + "," + isAdmin
                            + "," + currNode.data.firstName + "," + currNode.data.lastName + "," + launchTime.getTime() + System.getProperty("line.separator");
                } else if (currNode.data.lastLogin == null) {
                    content = content + currNode.data.username + "," + currNode.data.password + "," + isAdmin
                            + "," + currNode.data.firstName + "," + currNode.data.lastName + "," + " " + System.getProperty("line.separator");
                } else {
                    content = content + currNode.data.username + "," + currNode.data.password + "," + isAdmin
                            + "," + currNode.data.firstName + "," + currNode.data.lastName + "," + currNode.data.lastLogin.getTime() + System.getProperty("line.separator");
                }
            }

            File file = new File("C:\\Users\\" + System.getProperty("user.name") + "\\Google Drive\\users.txt");

            // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(content);
            bw.close();

            System.out.println("Database saved successfully.");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void saveAdminNotes() {
        try {
            String content = administrativeNotes;

            File file = new File("C:\\Users\\" + System.getProperty("user.name") + "\\Google Drive\\adminNotes.txt");

            // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(content);
            bw.close();

            System.out.println("Database saved successfully.");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void start(final Stage primaryStage) {
        primaryStage.setTitle("Tab Demo");
        primaryStage.setResizable(true);
        Group root = new Group();
        int width;
        Color fillColor;
        if (isAdmin) {
            width = 575;
            fillColor = Color.BEIGE;
        } else {
            width = 450;
            fillColor = Color.WHITE;
        }
        Scene scene = new Scene(root, width, 650, fillColor);

        TabPane tabPane = new TabPane();
        BorderPane mainPane = new BorderPane();

        tabPane.setTabClosingPolicy(UNAVAILABLE);

        // "Home" tab contents
        GridPane homeGrid = new GridPane();
        homeGrid.setAlignment(Pos.TOP_LEFT);
        homeGrid.setHgap(10);
        homeGrid.setVgap(10);
        homeGrid.setPadding(new Insets(25, 25, 25, 25));
        if (!isAdmin) {
            homeGrid.getColumnConstraints().add(new ColumnConstraints(120));
            homeGrid.getColumnConstraints().add(new ColumnConstraints(180));
        }

        Text welcome = new Text("Welcome, " + currentUser.firstName + "!");
        welcome.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        homeGrid.add(welcome, 0, 1);

        Label lastLogIn = new Label("Last log-in on:");
        homeGrid.add(lastLogIn, 0, 3);

        TextField lastLogInTime = new TextField();
        lastLogInTime.setEditable(false);
        if (currentUser.lastLogin == null) {
            lastLogInTime.setText("N/A");
        } else {
            lastLogInTime.setText(currentUser.lastLogin.toString());
        }
        homeGrid.add(lastLogInTime, 1, 3);

        Label adminNotesLabel = new Label("Administrative notes:");
        homeGrid.add(adminNotesLabel, 0, 5);

        TextArea adminNotes = new TextArea();
        if (!isAdmin) {
            adminNotes.setEditable(false);
        }
        adminNotes.setText(administrativeNotes);
        homeGrid.add(adminNotes, 0, 6, 2, 1);

        TextField newAdminNote = new TextField();
        newAdminNote.setPromptText("Enter an administrative note");
        homeGrid.add(newAdminNote, 0, 8, 2, 1);

        Button addAdminNote = new Button("Add note");
        HBox hbAddAdminNote = new HBox(10);
        addAdminNote.setDisable(true);
        hbAddAdminNote.getChildren().add(addAdminNote);
        homeGrid.add(hbAddAdminNote, 3, 8);

        Label withoutGoals = new Label("Students currently without goals:");
        homeGrid.add(withoutGoals, 0, 10);

        TextArea studentsWithoutGoals = new TextArea();
        studentsWithoutGoals.setEditable(false);
        AIUTreeIterator<String, Student> studentGoalChecker = new AIUTreeIterator(database.tree1);
        String goallessStudents = "";
        while (studentGoalChecker.hasNext()) {
            Student currentStudent = (Student) studentGoalChecker.next().data;
            if (currentStudent.goal.goal.equals("No current goal")) {
                goallessStudents += currentStudent.firstName + " " + currentStudent.lastName + "\n";
            }
        }
        studentsWithoutGoals.setText(goallessStudents);
        homeGrid.add(studentsWithoutGoals, 0, 11, 2, 1);

        // "Edit Profiles" tab contents
        GridPane editGrid = new GridPane();
        editGrid.setAlignment(Pos.TOP_LEFT);
        editGrid.setHgap(10);
        editGrid.setVgap(10);
        editGrid.setPadding(new Insets(25, 25, 25, 25));
        editGrid.getColumnConstraints().add(new ColumnConstraints(150));
        editGrid.getColumnConstraints().add(new ColumnConstraints(10));
        editGrid.getColumnConstraints().add(new ColumnConstraints(80));
        editGrid.getColumnConstraints().add(new ColumnConstraints(70));
        //editGrid.getColumnConstraints().add(new ColumnConstraints(150));

        Label selectStudent = new Label("Select student:");
        editGrid.add(selectStudent, 0, 3);

        AIUTreeIterator nameExtract = new AIUTreeIterator(database.tree1);

        final ArrayList<String> names = new ArrayList<String>();

        while (nameExtract.hasNext()) {
            Student currentStudent = (Student) nameExtract.next().data;
            names.add(currentStudent.lastName + ", " + currentStudent.firstName);
        }

        AIUTreeIterator goalExtract = new AIUTreeIterator(goalTree);
        ArrayList<String> civicsGoals = new ArrayList<String>();
        ArrayList<String> jobGoals = new ArrayList<String>();
        ArrayList<String> postsecGoals = new ArrayList<String>();
        ArrayList<String> otherGoals = new ArrayList<String>();

        while (goalExtract.hasNext()) {
            Goal currentGoal = (Goal) goalExtract.next().data;
            if (currentGoal.goalType == GoalType.CIVICS) {
                civicsGoals.add(currentGoal.goal);
            } else if (currentGoal.goalType == GoalType.JOB) {
                jobGoals.add(currentGoal.goal);
            } else if (currentGoal.goalType == GoalType.POSTSEC) {
                postsecGoals.add(currentGoal.goal);
            } else {
                otherGoals.add(currentGoal.goal);
            }
        }

        Object[] namesArray = names.toArray();
        Arrays.sort(namesArray);

        Label studentSearch = new Label("Search for a student:");
        editGrid.add(studentSearch, 0, 0);

        final TextField searchName = new TextField();
        searchName.setPromptText("Enter a student name");
        editGrid.add(searchName, 2, 0, 2, 1);

        final Button searchButton = new Button("Search");
        HBox hbSearchButton = new HBox(10);
        hbSearchButton.setAlignment(Pos.BOTTOM_RIGHT);
        hbSearchButton.getChildren().add(searchButton);
        editGrid.add(hbSearchButton, 4, 0);

        final Text searchMessage = new Text();
        searchMessage.setFill(Color.FIREBRICK);
        searchMessage.setText("Please enter a name");
        searchMessage.setVisible(false);
        editGrid.add(searchMessage, 2, 1);

        final TextField searchPhone = new TextField();
        searchPhone.setPromptText("Enter a phone number");
        editGrid.add(searchPhone, 2, 1, 2, 1);

        final Button searchPhoneButton = new Button("Search");
        HBox hbSearchPhoneButton = new HBox(10);
        hbSearchPhoneButton.setAlignment(Pos.BOTTOM_RIGHT);
        hbSearchPhoneButton.getChildren().add(searchPhoneButton);
        editGrid.add(hbSearchPhoneButton, 4, 1);

        final ComboBox findStudentEdit = new ComboBox();
        findStudentEdit.setItems(FXCollections.observableArrayList(namesArray));
        findStudentEdit.setVisibleRowCount(3);
        editGrid.add(findStudentEdit, 2, 3, 2, 1);

        final TextField firstNameField = new TextField();
        firstNameField.setPromptText("First Name (Required)");
        firstNameField.setEditable(false);
        editGrid.add(firstNameField, 0, 5, 1, 1);

        final TextField lastNameField = new TextField();
        lastNameField.setPromptText("Last Name (Required)");
        lastNameField.setEditable(false);
        editGrid.add(lastNameField, 0, 6, 1, 1);

        final TextField phoneNumberField = new TextField();
        phoneNumberField.setPromptText("Phone Number (Required):");
        phoneNumberField.setEditable(false);
        editGrid.add(phoneNumberField, 0, 7, 1, 1);

        final TextField emailField = new TextField();
        emailField.setPromptText("Email Address");
        emailField.setEditable(false);
        editGrid.add(emailField, 0, 8, 1, 1);

        final Label currentGoals = new Label("Current Goal(s): ");
        currentGoals.setAlignment(Pos.CENTER_RIGHT);
        editGrid.add(currentGoals, 2, 5, 2, 1);

        //Separator theSeparator = new Separator();

        String theSeparator = "------------------------";
        
        final ComboBox displayGoal = new ComboBox();
        displayGoal.setDisable(true);
        displayGoal.getItems().addAll(civicsGoals);
        if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
            displayGoal.getItems().add(theSeparator);
        }
        displayGoal.getItems().addAll(jobGoals);
        if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
            displayGoal.getItems().add(theSeparator);
        }
        displayGoal.getItems().addAll(postsecGoals);
        if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
            displayGoal.getItems().add(theSeparator);
        }
        displayGoal.getItems().addAll(otherGoals);
        editGrid.add(displayGoal, 2, 6, 2, 1);

        final Button changeGoal = new Button("Change");
        HBox hbChangeGoal = new HBox(10);
        hbChangeGoal.setAlignment(Pos.BOTTOM_RIGHT);
        hbChangeGoal.getChildren().add(changeGoal);
        changeGoal.setDisable(true);
        editGrid.add(hbChangeGoal, 4, 6);

        final ComboBox displaySecondGoal = new ComboBox();
        displaySecondGoal.setDisable(true);
        displaySecondGoal.getItems().addAll(civicsGoals);
        if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
            displaySecondGoal.getItems().add(theSeparator);
        }
        displaySecondGoal.getItems().addAll(jobGoals);
        if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
            displaySecondGoal.getItems().add(theSeparator);
        }
        displaySecondGoal.getItems().addAll(postsecGoals);
        if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
            displaySecondGoal.getItems().add(theSeparator);
        }
        displaySecondGoal.getItems().addAll(otherGoals);
        editGrid.add(displaySecondGoal, 2, 7, 2, 1);

        final Button changeSecondGoal = new Button("Change");
        HBox hbChangeSecondGoal = new HBox(10);
        hbChangeSecondGoal.setAlignment(Pos.BOTTOM_RIGHT);
        hbChangeSecondGoal.getChildren().add(changeSecondGoal);
        changeSecondGoal.setDisable(true);
        editGrid.add(hbChangeSecondGoal, 4, 7);

        Label notes = new Label("Notes:");
        editGrid.add(notes, 0, 10);

        final TextArea noteArea = new TextArea();
        noteArea.setPrefRowCount(5);
        noteArea.setEditable(false);
        editGrid.add(noteArea, 0, 11, 3, 7);

        final TextField noteTime = new TextField();
        noteTime.setEditable(false);
        editGrid.add(noteTime, 0, 19, 4, 1);

        final Button saveChanges = new Button("Save Changes");
        HBox hbSaveChanges = new HBox(10);
        hbSaveChanges.setAlignment(Pos.BOTTOM_RIGHT);
        hbSaveChanges.getChildren().add(saveChanges);
        saveChanges.setDisable(true);
        editGrid.add(hbSaveChanges, 2, 21, 2, 1);

        final Button deleteStudent = new Button("Delete Student");
        final HBox hbDeleteStudent = new HBox(10);
        hbDeleteStudent.setAlignment(Pos.BOTTOM_LEFT);
        hbDeleteStudent.getChildren().add(deleteStudent);
        deleteStudent.setDisable(true);
        editGrid.add(hbDeleteStudent, 0, 21);

        final Text incompleteInput = new Text();
        editGrid.add(incompleteInput, 2, 22);

        // "Student Goals" tab contents
        final GridPane goalsGrid = new GridPane();
        goalsGrid.setAlignment(Pos.TOP_LEFT);
        goalsGrid.setHgap(10);
        goalsGrid.setVgap(10);
        goalsGrid.setPadding(new Insets(25, 25, 25, 25));
        goalsGrid.getColumnConstraints().add(new ColumnConstraints(120));
        goalsGrid.getColumnConstraints().add(new ColumnConstraints(150));

        Label searchForStudent = new Label("Search for a student:");
        goalsGrid.add(searchForStudent, 0, 0);

        final TextField searchName2 = new TextField();
        searchName2.setPromptText("Enter a student name");
        goalsGrid.add(searchName2, 1, 0);

        final Button searchButton2 = new Button("Search");
        HBox hbSearchButton2 = new HBox(10);
        hbSearchButton2.getChildren().add(searchButton2);
        goalsGrid.add(hbSearchButton2, 2, 0);

        final TextField searchPhone2 = new TextField();
        searchPhone2.setPromptText("Enter a phone number");
        goalsGrid.add(searchPhone2, 1, 1);

        final Button searchPhoneButton2 = new Button("Search");
        HBox hbSearchPhoneButton2 = new HBox(10);
        hbSearchPhoneButton2.getChildren().add(searchPhoneButton2);
        goalsGrid.add(hbSearchPhoneButton2, 2, 1);

        Label studentLookUp = new Label("Select student:");
        goalsGrid.add(studentLookUp, 0, 2);

        final ComboBox findStudentGoals = new ComboBox();
        findStudentGoals.setItems(FXCollections.observableArrayList(namesArray));
        findStudentGoals.setVisibleRowCount(3);
        goalsGrid.add(findStudentGoals, 1, 2);

        Label currentGoal2 = new Label("Current goal(s):");
        goalsGrid.add(currentGoal2, 0, 3);

        final TextField currentStudentGoal = new TextField();
        currentStudentGoal.setEditable(false);
        goalsGrid.add(currentStudentGoal, 1, 3);

        final Button selectGoal1 = new Button("Select");
        HBox hbSelectGoal1 = new HBox(10);
        hbSelectGoal1.getChildren().add(selectGoal1);
        selectGoal1.setDisable(true);
        goalsGrid.add(hbSelectGoal1, 2, 3);

        final Button markGoal1Complete = new Button("Mark as complete");
        HBox hbMarkGoal1Complete = new HBox(10);
        hbMarkGoal1Complete.getChildren().add(markGoal1Complete);
        markGoal1Complete.setDisable(true);
        goalsGrid.add(hbMarkGoal1Complete, 3, 3);

        final TextField secondStudentGoal = new TextField();
        secondStudentGoal.setEditable(false);
        goalsGrid.add(secondStudentGoal, 1, 4);

        final Button selectGoal2 = new Button("Select");
        HBox hbSelectGoal2 = new HBox(10);
        hbSelectGoal2.getChildren().add(selectGoal2);
        selectGoal2.setDisable(true);
        goalsGrid.add(hbSelectGoal2, 2, 4);

        final Button markGoal2Complete = new Button("Mark as complete");
        HBox hbMarkGoal2Complete = new HBox(10);
        hbMarkGoal2Complete.getChildren().add(markGoal2Complete);
        markGoal2Complete.setDisable(true);
        goalsGrid.add(hbMarkGoal2Complete, 3, 4);

        Label subgoals = new Label("Subgoals:");
        goalsGrid.add(subgoals, 0, 5);

        Button saveGoalChanges1 = new Button("Save Changes");
        final HBox hbSaveGoalChanges1 = new HBox(10);
        hbSaveGoalChanges1.setAlignment(Pos.BOTTOM_RIGHT);
        hbSaveGoalChanges1.getChildren().add(saveGoalChanges1);

        Button saveGoalChanges2 = new Button("Save Changes");
        final HBox hbSaveGoalChanges2 = new HBox(10);
        hbSaveGoalChanges2.setAlignment(Pos.BOTTOM_RIGHT);
        hbSaveGoalChanges2.getChildren().add(saveGoalChanges2);

        // "New Student" tab contents
        GridPane newStudentGrid = new GridPane();
        newStudentGrid.setAlignment(Pos.TOP_LEFT);
        newStudentGrid.setHgap(10);
        newStudentGrid.setVgap(10);
        newStudentGrid.setPadding(new Insets(25, 25, 25, 25));
        newStudentGrid.getColumnConstraints().add(new ColumnConstraints(150));
        newStudentGrid.getColumnConstraints().add(new ColumnConstraints(20));
        newStudentGrid.getColumnConstraints().add(new ColumnConstraints(150));

        final TextField firstNameField2 = new TextField();
        firstNameField2.setPromptText("First Name (Required)");
        newStudentGrid.add(firstNameField2, 0, 2, 1, 1);

        final TextField lastNameField2 = new TextField();
        lastNameField2.setPromptText("Last Name (Required)");
        newStudentGrid.add(lastNameField2, 0, 3, 1, 1);

        final TextField phoneNumberField2 = new TextField();
        phoneNumberField2.setPromptText("Phone Number (Required)");
        newStudentGrid.add(phoneNumberField2, 0, 4, 1, 1);

        final TextField emailField2 = new TextField();
        emailField2.setPromptText("Email Address");
        newStudentGrid.add(emailField2, 0, 5, 1, 1);

        Label goalSelection = new Label("Select a goal (Required):");
        newStudentGrid.add(goalSelection, 2, 2);

        final ComboBox goals2 = new ComboBox();
        goals2.getItems().addAll(civicsGoals);
        if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
            goals2.getItems().add(theSeparator);
        }
        goals2.getItems().addAll(jobGoals);
        if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
            goals2.getItems().add(theSeparator);
        }
        goals2.getItems().addAll(postsecGoals);
        if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
            goals2.getItems().add(theSeparator);
        }
        goals2.getItems().addAll(otherGoals);
        newStudentGrid.add(goals2, 2, 3);

        Label secondGoalSelection = new Label("Select a second goal:");
        newStudentGrid.add(secondGoalSelection, 2, 4);

        final ComboBox secondGoals2 = new ComboBox();
        secondGoals2.getItems().addAll(civicsGoals);
        if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
            secondGoals2.getItems().add(theSeparator);
        }
        secondGoals2.getItems().addAll(jobGoals);
        if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
            secondGoals2.getItems().add(theSeparator);
        }
        secondGoals2.getItems().addAll(postsecGoals);
        if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
            secondGoals2.getItems().add(theSeparator);
        }
        secondGoals2.getItems().addAll(otherGoals);
        newStudentGrid.add(secondGoals2, 2, 5);

        CheckBox hasEmail = new CheckBox("Student does not have an email address");
        newStudentGrid.add(hasEmail, 0, 7, 3, 1);

        Label notes2 = new Label("Notes:");
        newStudentGrid.add(notes2, 0, 9);

        final TextArea noteArea2 = new TextArea();
        noteArea2.setPrefRowCount(5);
        newStudentGrid.add(noteArea2, 0, 10, 3, 5);

        Button addStudent = new Button("Add Student");
        HBox hbAddStudent = new HBox(10);
        hbAddStudent.setAlignment(Pos.BOTTOM_RIGHT);
        hbAddStudent.getChildren().add(addStudent);
        newStudentGrid.add(hbAddStudent, 2, 17);

        final Text studentAdded = new Text();
        newStudentGrid.add(studentAdded, 2, 19);

        // "Flags" tab contents
        GridPane flagsGrid = new GridPane();
        flagsGrid.setAlignment(Pos.TOP_LEFT);
        flagsGrid.setHgap(10);
        flagsGrid.setVgap(10);
        flagsGrid.setPadding(new Insets(25, 25, 25, 25));
        flagsGrid.getColumnConstraints().add(new ColumnConstraints(120));
        flagsGrid.getColumnConstraints().add(new ColumnConstraints(50));
        flagsGrid.getColumnConstraints().add(new ColumnConstraints(70));
        flagsGrid.getColumnConstraints().add(new ColumnConstraints(20));
        flagsGrid.getColumnConstraints().add(new ColumnConstraints(100));

        Label studentSearchFlags = new Label("Search for a student:");
        flagsGrid.add(studentSearchFlags, 0, 1);

        final TextField searchNameFlags = new TextField();
        searchNameFlags.setPromptText("Enter a student name");
        flagsGrid.add(searchNameFlags, 1, 1, 3, 1);

        Button searchButtonFlags = new Button("Search");
        HBox hbSearchButtonFlags = new HBox(10);
        hbSearchButtonFlags.getChildren().add(searchButtonFlags);
        flagsGrid.add(hbSearchButtonFlags, 4, 1);

        final TextField searchPhoneFlags = new TextField();
        searchPhoneFlags.setPromptText("Enter a phone number");
        flagsGrid.add(searchPhoneFlags, 1, 2, 3, 1);

        Button searchPhoneButtonFlags = new Button("Search");
        HBox hbSearchPhoneButtonFlags = new HBox(10);
        hbSearchPhoneButtonFlags.getChildren().add(searchPhoneButtonFlags);
        flagsGrid.add(hbSearchPhoneButtonFlags, 4, 2);

        Label selectStudentFlags = new Label("Select a student:");
        flagsGrid.add(selectStudentFlags, 0, 4);

        final ComboBox findStudentFlags = new ComboBox();
        findStudentFlags.setItems(FXCollections.observableArrayList(namesArray));
        findStudentFlags.setVisibleRowCount(3);
        flagsGrid.add(findStudentFlags, 1, 4, 2, 1);

        Label timeSinceLabel = new Label("Time since profile last updated:");
        flagsGrid.add(timeSinceLabel, 0, 6, 2, 1);

        final TextField timeSince = new TextField();
        timeSince.setEditable(false);
        flagsGrid.add(timeSince, 2, 6, 3, 1);

        /*
         final Button saveTime = new Button("Update");
         HBox hbSaveTime = new HBox(10);
         hbSaveTime.setAlignment(Pos.BOTTOM_LEFT);
         hbSaveTime.getChildren().add(saveTime);
         saveTime.setDisable(true);
         flagsGrid.add(hbSaveTime, 2, 5);
         */
        Label unreportedStudents = new Label("Students whose profile has not been updated in:");
        flagsGrid.add(unreportedStudents, 0, 11, 3, 1);

        final ComboBox reportTimes = new ComboBox();
        reportTimes.setItems(FXCollections.observableArrayList("0-2 weeks", "2-4 weeks",
                "4-6 weeks", "6+ weeks"));
        flagsGrid.add(reportTimes, 3, 11, 2, 1);

        final TextArea studentList = new TextArea();
        studentList.setPrefRowCount(6);
        studentList.setEditable(false);
        flagsGrid.add(studentList, 0, 13, 5, 6);

        final Button printBtn = new Button("Print");
        HBox hbPrint = new HBox(10);
        hbPrint.setAlignment(Pos.BOTTOM_RIGHT);
        hbPrint.getChildren().add(printBtn);
        printBtn.setDisable(true);
        flagsGrid.add(hbPrint, 4, 21);

        // "Reports" tab contents
        GridPane reportsGrid = new GridPane();
        reportsGrid.setAlignment(Pos.TOP_LEFT);
        reportsGrid.setHgap(10);
        reportsGrid.setVgap(10);
        reportsGrid.setPadding(new Insets(25, 20, 25, 20));
        reportsGrid.getColumnConstraints().add(new ColumnConstraints(150));
        //reportsGrid.getColumnConstraints().add(new ColumnConstraints(50));
        reportsGrid.getColumnConstraints().add(new ColumnConstraints(45));
        reportsGrid.getColumnConstraints().add(new ColumnConstraints(40));

        DecimalFormat df = new DecimalFormat("#.00");

        Label studentSearchReport = new Label("Search for a student:");
        reportsGrid.add(studentSearchReport, 0, 0);

        final TextField searchName3 = new TextField();
        searchName3.setPromptText("Enter a student name");
        reportsGrid.add(searchName3, 1, 0, 3, 1);

        final Button searchButton3 = new Button("Search");
        HBox hbSearchButton3 = new HBox(10);
        hbSearchButton3.getChildren().add(searchButton3);
        reportsGrid.add(hbSearchButton3, 4, 0);

        final TextField searchPhone3 = new TextField();
        searchPhone3.setPromptText("Enter a phone number");
        reportsGrid.add(searchPhone3, 1, 1, 3, 1);

        final Button searchPhoneButton3 = new Button("Search");
        HBox hbSearchPhoneButton3 = new HBox(10);
        hbSearchPhoneButton3.getChildren().add(searchPhoneButton3);
        reportsGrid.add(hbSearchPhoneButton3, 4, 1);

        Label selectStudent2 = new Label("Select student:");
        reportsGrid.add(selectStudent2, 0, 2);

        final ComboBox findStudentReports = new ComboBox();
        findStudentReports.setItems(FXCollections.observableArrayList(namesArray));
        findStudentReports.setVisibleRowCount(3);
        reportsGrid.add(findStudentReports, 1, 2, 3, 1);

        Label completedGoals = new Label("Completed goals:");
        reportsGrid.add(completedGoals, 2, 10, 3, 1);

        final TextArea completedGoalsList = new TextArea();
        completedGoalsList.setEditable(false);
        reportsGrid.add(completedGoalsList, 2, 11, 3, 7);

        Label completedSubgoals = new Label("Completed subgoals:");
        reportsGrid.add(completedSubgoals, 0, 10, 2, 1);

        final TextArea completedSubgoalsList = new TextArea();
        completedSubgoalsList.setEditable(false);
        reportsGrid.add(completedSubgoalsList, 0, 11, 1, 3);

        Label remainingSubgoals = new Label("Remaining subgoals:");
        reportsGrid.add(remainingSubgoals, 0, 14, 2, 1);

        final TextArea remainingSubgoalsList = new TextArea();
        remainingSubgoalsList.setEditable(false);
        reportsGrid.add(remainingSubgoalsList, 0, 15, 1, 3);

        final Button printReport = new Button("Print Individual Report");
        HBox hbPrintReport = new HBox(10);
        hbPrintReport.setAlignment(Pos.BOTTOM_RIGHT);
        hbPrintReport.getChildren().add(printReport);
        printReport.setDisable(true);
        reportsGrid.add(hbPrintReport, 0, 18, 2, 1);

        Label studentLabel = new Label("Student name:");
        reportsGrid.add(studentLabel, 0, 4);

        final TextField studentName = new TextField();
        studentName.setPromptText("Student Name");
        studentName.setEditable(false);
        reportsGrid.add(studentName, 1, 4, 3, 1);

        Label goalLabel = new Label("Current goal(s):");
        reportsGrid.add(goalLabel, 0, 5);

        final TextField primaryStudentGoal = new TextField();
        primaryStudentGoal.setPromptText("Primary Student Goal");
        primaryStudentGoal.setEditable(false);
        reportsGrid.add(primaryStudentGoal, 1, 5, 3, 1);

        final Button selectGoalReport1 = new Button("Select");
        HBox hbSelectGoalReport1 = new HBox(10);
        hbSelectGoalReport1.getChildren().add(selectGoalReport1);
        selectGoalReport1.setDisable(true);
        reportsGrid.add(hbSelectGoalReport1, 4, 5);

        final TextField secondaryStudentGoal = new TextField();
        secondaryStudentGoal.setPromptText("Secondary Student Goal");
        secondaryStudentGoal.setEditable(false);
        reportsGrid.add(secondaryStudentGoal, 1, 6, 3, 1);

        final Button selectGoalReport2 = new Button("Select");
        HBox hbSelectGoalReport2 = new HBox(10);
        hbSelectGoalReport2.getChildren().add(selectGoalReport2);
        selectGoalReport2.setDisable(true);
        reportsGrid.add(hbSelectGoalReport2, 4, 6);

        final Label goalsCompleted = new Label();
        goalsCompleted.setVisible(false);
        reportsGrid.add(goalsCompleted, 1, 7, 3, 1);

        final Label progressLabel = new Label();
        progressLabel.setVisible(false);
        reportsGrid.add(progressLabel, 1, 8, 4, 1);

        final ProgressBar goalProgress = new ProgressBar();
        goalProgress.setVisible(false);
        reportsGrid.add(goalProgress, 1, 9, 3, 1);

        Button printReportAll = new Button("Create Summary Report");
        HBox hbPrintReportAll = new HBox(10);
        hbPrintReportAll.setAlignment(Pos.BOTTOM_RIGHT);
        hbPrintReportAll.getChildren().add(printReportAll);
        reportsGrid.add(hbPrintReportAll, 3, 18, 3, 1);

        // "Administration" tab contents
        GridPane adminGrid = new GridPane();
        adminGrid.setAlignment(Pos.TOP_LEFT);
        adminGrid.setHgap(10);
        adminGrid.setVgap(10);
        adminGrid.setPadding(new Insets(10, 25, 5, 25));

        Label updateUser = new Label("Update a current user account:");
        adminGrid.add(updateUser, 0, 0);

        Label selectUser = new Label("Select user:");
        adminGrid.add(selectUser, 0, 1);

        AIUTreeIterator userIterator = new AIUTreeIterator(userTree);
        final ArrayList<String> usernames = new ArrayList<String>();
        while (userIterator.hasNext()) {
            usernames.add(((UserAndPass) userIterator.next().data).username);
        }

        final ComboBox userList = new ComboBox();
        userList.setItems(FXCollections.observableArrayList(usernames));
        adminGrid.add(userList, 1, 1);

        final TextField username = new TextField();
        username.setPromptText("Username");
        username.setEditable(false);
        adminGrid.add(username, 0, 2, 2, 1);

        final Text usernameMatch1 = new Text();
        usernameMatch1.setFill(Color.FIREBRICK);
        usernameMatch1.setText("Username already exists!");
        usernameMatch1.setVisible(false);
        adminGrid.add(usernameMatch1, 2, 2);

        final PasswordField password = new PasswordField();
        password.setPromptText("Password");
        password.setEditable(false);
        adminGrid.add(password, 0, 3, 2, 1);

        final PasswordField confirmPassword = new PasswordField();
        confirmPassword.setPromptText("Confirm password");
        confirmPassword.setEditable(false);
        adminGrid.add(confirmPassword, 0, 4, 2, 1);

        final Text passwordMatch1 = new Text();
        passwordMatch1.setFill(Color.FIREBRICK);
        passwordMatch1.setText("Passwords do not match!");
        passwordMatch1.setVisible(false);
        adminGrid.add(passwordMatch1, 2, 4);

        final TextField userFirstName = new TextField();
        userFirstName.setPromptText("First name");
        userFirstName.setEditable(false);
        adminGrid.add(userFirstName, 0, 5, 2, 1);

        final TextField userLastName = new TextField();
        userLastName.setPromptText("Last name");
        userLastName.setEditable(false);
        adminGrid.add(userLastName, 0, 6, 2, 1);

        final Label setAdmin = new Label("Set as administrator:");
        setAdmin.setVisible(false);
        adminGrid.add(setAdmin, 0, 7);

        final ChoiceBox isAdministrator = new ChoiceBox();
        isAdministrator.setItems(FXCollections.observableArrayList("Yes", "No"));
        isAdministrator.setVisible(false);
        adminGrid.add(isAdministrator, 1, 7);

        final Text userChangesFailed = new Text();
        userChangesFailed.setFill(Color.FIREBRICK);
        userChangesFailed.setText("Please fill out all fields!");
        userChangesFailed.setVisible(false);
        adminGrid.add(userChangesFailed, 2, 8);

        final Button saveUserChanges = new Button("Save Changes");
        final HBox hbSaveUserChanges = new HBox(10);
        hbSaveUserChanges.setAlignment(Pos.BOTTOM_RIGHT);
        hbSaveUserChanges.getChildren().add(saveUserChanges);
        hbSaveUserChanges.setVisible(false);
        adminGrid.add(hbSaveUserChanges, 1, 8);

        final Button deleteUser = new Button("Delete User");
        final HBox hbDeleteUser = new HBox(10);
        hbDeleteUser.setAlignment(Pos.BOTTOM_LEFT);
        hbDeleteUser.getChildren().add(deleteUser);
        hbDeleteUser.setVisible(false);
        adminGrid.add(hbDeleteUser, 0, 8);

        Label addUser = new Label("Create a new user account:");
        adminGrid.add(addUser, 0, 9);

        final TextField newUsername = new TextField();
        newUsername.setPromptText("Username");
        adminGrid.add(newUsername, 0, 10, 2, 1);

        final Text usernameMatch2 = new Text();
        usernameMatch2.setFill(Color.FIREBRICK);
        usernameMatch2.setText("Username already exists!");
        usernameMatch2.setVisible(false);
        adminGrid.add(usernameMatch2, 2, 10);

        final PasswordField newPassword = new PasswordField();
        newPassword.setPromptText("Password");
        adminGrid.add(newPassword, 0, 11, 2, 1);

        final PasswordField confirmNewPassword = new PasswordField();
        confirmNewPassword.setPromptText("Confirm password");
        adminGrid.add(confirmNewPassword, 0, 12, 2, 1);

        final Text passwordMatch2 = new Text();
        passwordMatch2.setFill(Color.FIREBRICK);
        passwordMatch2.setText("Passwords do not match!");
        passwordMatch2.setVisible(false);
        adminGrid.add(passwordMatch2, 2, 12);

        final TextField userFirstName2 = new TextField();
        userFirstName2.setPromptText("First name");
        adminGrid.add(userFirstName2, 0, 13, 2, 1);

        final TextField userLastName2 = new TextField();
        userLastName2.setPromptText("Last name");
        adminGrid.add(userLastName2, 0, 14, 2, 1);

        Label setAdmin2 = new Label("Set as administrator:");
        adminGrid.add(setAdmin2, 0, 15);

        final ChoiceBox isAdministrator2 = new ChoiceBox();
        isAdministrator2.setItems(FXCollections.observableArrayList("Yes", "No"));
        adminGrid.add(isAdministrator2, 1, 15);

        final Text newUserAdded = new Text();
        newUserAdded.setFill(Color.FIREBRICK);
        newUserAdded.setText("Please fill out all fields!");
        newUserAdded.setVisible(false);
        adminGrid.add(newUserAdded, 0, 16);

        Button addNewUser = new Button("Add user");
        HBox hbNewUser = new HBox(10);
        hbNewUser.setAlignment(Pos.BOTTOM_LEFT);
        hbNewUser.getChildren().add(addNewUser);
        adminGrid.add(hbNewUser, 1, 16);

        // "Manage Goals" tab contents
        GridPane manageGoalsGrid = new GridPane();
        manageGoalsGrid.setAlignment(Pos.TOP_LEFT);
        manageGoalsGrid.setHgap(10);
        manageGoalsGrid.setVgap(10);
        manageGoalsGrid.setPadding(new Insets(25, 25, 25, 25));
        manageGoalsGrid.getColumnConstraints().add(new ColumnConstraints(120));
        manageGoalsGrid.getColumnConstraints().add(new ColumnConstraints(50));
        manageGoalsGrid.getColumnConstraints().add(new ColumnConstraints(100));
        manageGoalsGrid.getColumnConstraints().add(new ColumnConstraints(40));

        Label createGoal = new Label("Create a new goal:");
        manageGoalsGrid.add(createGoal, 0, 1);

        final TextField createdGoal = new TextField();
        createdGoal.setPromptText("Enter a goal statement");
        manageGoalsGrid.add(createdGoal, 1, 1, 2, 1);

        Label goalTypeLabel = new Label("Select a goal type:");
        manageGoalsGrid.add(goalTypeLabel, 0, 3);

        final ComboBox selectGoalType = new ComboBox();
        selectGoalType.setItems(FXCollections.observableArrayList("Civics", "Job",
                "Post-secondary", "Other"));
        manageGoalsGrid.add(selectGoalType, 1, 3, 2, 1);

        final Button addGoal = new Button("Add goal");
        HBox hbAddGoal = new HBox(10);
        hbAddGoal.getChildren().add(addGoal);
        addGoal.setDisable(true);
        manageGoalsGrid.add(hbAddGoal, 3, 3, 2, 1);

        Label modifyGoal = new Label("Select an existing goal to modify:");
        manageGoalsGrid.add(modifyGoal, 0, 5, 2, 1);

        final ComboBox listOfGoals = new ComboBox();
        listOfGoals.getItems().addAll(civicsGoals);
        if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
            listOfGoals.getItems().add(theSeparator);
        }
        listOfGoals.getItems().addAll(jobGoals);
        if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
            listOfGoals.getItems().add(theSeparator);
        }
        listOfGoals.getItems().addAll(postsecGoals);
        if (postsecGoals.size() != 0 && otherGoals.size() != 1) {
            listOfGoals.getItems().add(theSeparator);
        }
        listOfGoals.getItems().addAll(otherGoals);
        listOfGoals.getItems().remove("No current goal");
        manageGoalsGrid.add(listOfGoals, 2, 5, 3, 1);

        Label goalStatementLabel = new Label("Goal statement:");
        manageGoalsGrid.add(goalStatementLabel, 0, 7);

        final TextField goalStatement = new TextField();
        goalStatement.setPromptText("Statement of Goal");
        goalStatement.setEditable(false);
        manageGoalsGrid.add(goalStatement, 1, 7, 2, 1);

        final Button editGoal = new Button("Edit");
        HBox hbEditGoal = new HBox(10);
        hbEditGoal.getChildren().add(editGoal);
        editGoal.setDisable(true);
        manageGoalsGrid.add(hbEditGoal, 3, 7);

        final Button saveGoal = new Button("Save");
        HBox hbSaveGoal = new HBox(10);
        hbSaveGoal.getChildren().add(saveGoal);
        saveGoal.setDisable(true);
        manageGoalsGrid.add(hbSaveGoal, 4, 7);

        Label subgoalEdit = new Label("Subgoals:");
        manageGoalsGrid.add(subgoalEdit, 0, 9);

        Button deleteSubgoals = new Button("Delete Selected");
        HBox hbDeleteSubgoals = new HBox(10);
        hbDeleteSubgoals.getChildren().add(deleteSubgoals);
        hbDeleteSubgoals.setAlignment(Pos.BOTTOM_RIGHT);

        Button updateOrder = new Button("Update order");
        HBox hbUpdateOrder = new HBox(10);
        hbUpdateOrder.getChildren().add(updateOrder);

        Label addSubgoalLabel = new Label("Add a subgoal:");

        final TextField newSubgoal = new TextField();
        newSubgoal.setPromptText("Enter a subgoal statement");

        Button addSubgoal = new Button("Add");
        HBox hbAddSubgoal = new HBox(10);
        hbAddSubgoal.getChildren().add(addSubgoal);
        addSubgoal.setDisable(true);

        Button deleteGoal = new Button("               Delete goal               ");
        HBox hbDeleteGoal = new HBox(10);
        hbDeleteGoal.setAlignment(Pos.CENTER);
        hbDeleteGoal.getChildren().add(deleteGoal);

        // Popup Window
        final PopUpWindow popup = new PopUpWindow();
        final Stage popupStage = new Stage();

        GridPane popupGrid = new GridPane();
        popupGrid.setAlignment(Pos.TOP_CENTER);
        popupGrid.setHgap(10);
        popupGrid.setVgap(10);
        popupGrid.setPadding(new Insets(10, 10, 10, 10));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));

        final Text areYouSure1 = new Text();
        areYouSure1.setFill(Color.BLACK);
        areYouSure1.setText("Are you sure you want to make these changes?");
        popupGrid.add(areYouSure1, 1, 1, 5, 1);
        areYouSure1.setVisible(false);

        final Text areYouSure2 = new Text();
        areYouSure2.setFill(Color.BLACK);
        areYouSure2.setText("Are you sure you want to delete this student?");
        popupGrid.add(areYouSure2, 1, 1, 5, 1);
        areYouSure2.setVisible(false);

        final Text areYouSure3 = new Text();
        areYouSure3.setFill(Color.BLACK);
        areYouSure3.setText("Are you sure you want to delete this user?");
        popupGrid.add(areYouSure3, 1, 1, 5, 1);
        areYouSure3.setVisible(false);

        final Text areYouSure4 = new Text();
        areYouSure4.setFill(Color.BLACK);
        popupGrid.add(areYouSure4, 1, 1, 5, 1);
        areYouSure4.setVisible(false);

        final Text areYouSure5 = new Text();
        areYouSure5.setFill(Color.BLACK);
        areYouSure5.setText("Are you sure you want to mark this goal as complete?");
        popupGrid.add(areYouSure5, 1, 1, 5, 1);
        areYouSure5.setVisible(false);

        Button yes = new Button("Yes");
        HBox hbYes = new HBox(10);
        hbYes.setAlignment(Pos.BOTTOM_RIGHT);
        hbYes.getChildren().add(yes);
        popupGrid.add(yes, 2, 3);

        Button no = new Button("No");
        HBox hbNo = new HBox(10);
        hbNo.setAlignment(Pos.BOTTOM_LEFT);
        hbNo.getChildren().add(no);
        popupGrid.add(no, 3, 3);

        yes.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                popup.setAgreeToChanges(true);
                popupStage.close();
                if (popup.isUpdatingStudent) {
                    saveChanges.fire();
                } else if (popup.isDeletingStudent) {
                    deleteStudent.fire();
                } else if (popup.isUpdatingUser) {
                    saveUserChanges.fire();
                } else if (popup.isDeletingUser) {
                    deleteUser.fire();
                } else if (popup.isMarkingGoal1Complete) {
                    markGoal1Complete.fire();
                } else if (popup.isMarkingGoal2Complete) {
                    markGoal2Complete.fire();
                } else {
                    deleteGoal.fire();
                }
            }
        });

        no.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                popup.setAgreeToChanges(false);
                popupStage.close();
            }
        });

        final Scene popupScene = new Scene(popupGrid, 450, 120);
        primaryStage.setResizable(false);

        primaryStage.setTitle("");

        // "Home" tab Actions
        newAdminNote.setOnKeyReleased(new EventHandler<KeyEvent>() {
            public void handle(KeyEvent k) {
                if (newAdminNote.getLength() == 0) {
                    addAdminNote.setDisable(true);
                } else {
                    addAdminNote.setDisable(false);
                }
            }
        });

        addAdminNote.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                administrativeNotes += newAdminNote.getText()
                        + " (" + currentUser.firstName + " " + currentUser.lastName + ") \n";
                newAdminNote.clear();
                addAdminNote.setDisable(true);
                adminNotes.setText(administrativeNotes);
            }
        });

        adminNotes.setOnKeyReleased(new EventHandler<KeyEvent>() {
            public void handle(KeyEvent k) {
                String rawNotes = adminNotes.getText();
                if (!rawNotes.isEmpty()) {
                    while (rawNotes.lastIndexOf("\n") == rawNotes.length() - 1) {
                        rawNotes = rawNotes.substring(0, rawNotes.length() - 1);
                    }
                    rawNotes += "\n";
                }
                administrativeNotes = rawNotes;
            }
        });

        // "Edit Profiles" tab Actions        
        findStudentEdit.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                firstNameField.clear();
                lastNameField.clear();
                emailField.clear();
                phoneNumberField.clear();
                displayGoal.getSelectionModel().clearSelection();
                displayGoal.setValue(null);
                displaySecondGoal.getSelectionModel().clearSelection();
                displaySecondGoal.setValue(null);
                displayGoal.setDisable(true);
                displaySecondGoal.setDisable(true);
                noteArea.clear();
                noteTime.clear();
                incompleteInput.setText("");
                saveChanges.setDisable(true);
                deleteStudent.setDisable(true);
                if (findStudentEdit.getValue() != null) {
                    firstNameField.setEditable(true);
                    lastNameField.setEditable(true);
                    emailField.setEditable(true);
                    phoneNumberField.setEditable(true);
                    noteArea.setEditable(true);
                    saveChanges.setDisable(false);
                    deleteStudent.setDisable(false);
                    final String choice = (String) findStudentEdit.getValue();
                    String lastName = choice.substring(0, choice.indexOf(","));
                    Student currentStudent = (Student) database.find1(lastName);
                    firstNameField.setText(currentStudent.firstName);
                    lastNameField.setText(currentStudent.lastName);
                    emailField.setText(currentStudent.emailAddress);
                    phoneNumberField.setText(currentStudent.phoneNumber);
                    if (currentStudent.goal == null) {
                        displayGoal.setValue(null);
                    } else {
                        goalBackup = currentStudent.goal.goal;
                        displayGoal.setValue(currentStudent.goal.goal);
                    }
                    if (currentStudent.secondGoal == null) {
                        displaySecondGoal.setValue(null);
                    } else {
                        secondGoalBackup = currentStudent.secondGoal.goal;
                        displaySecondGoal.setValue(currentStudent.secondGoal.goal);
                    }
                    changeGoal.setDisable(false);
                    if (currentStudent.goal != null) {
                        changeSecondGoal.setDisable(false);
                    }
                    if (!currentStudent.notes.notes.equals(" ")) {
                        noteArea.setText(currentStudent.notes.notes);
                    }
                    noteTime.setText("Notes last updated on: "
                            + currentStudent.notes.date.toString());
                } else {
                    firstNameField.setEditable(false);
                    lastNameField.setEditable(false);
                    emailField.setEditable(false);
                    phoneNumberField.setEditable(false);
                    noteArea.setEditable(false);
                    changeGoal.setDisable(true);
                    changeSecondGoal.setDisable(true);
                }
            }
        });

        searchButton.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (searchName.getLength() == 0) {
                    searchMessage.setFill(Color.FIREBRICK);
                    searchMessage.setText("Please enter a name");
                    searchMessage.setVisible(true);
                } else {
                    String query = searchName.getText().toLowerCase();
                    int spaceIndex = query.indexOf(" ");
                    if (spaceIndex >= 0) {
                        int commaIndex = query.indexOf(",");
                        if (commaIndex < 0) {
                            String firstName = query.substring(0, spaceIndex);
                            String lastName = query.substring(spaceIndex + 1);
                            firstName = firstName.substring(0, 1).toUpperCase() + firstName.substring(1);
                            lastName = lastName.substring(0, 1).toUpperCase() + lastName.substring(1);
                            String name = lastName + ", " + firstName;
                            if (names.contains(name)) {
                                findStudentEdit.setValue(name);
                                searchMessage.setVisible(false);
                            } else if (names.contains(firstName + ", " + lastName)) {
                                findStudentEdit.setValue(firstName + ", " + lastName);
                                searchMessage.setVisible(false);
                            } else {
                                searchMessage.setFill(Color.FIREBRICK);
                                searchMessage.setText("Student not found");
                                searchMessage.setVisible(true);
                            }
                        } else {
                            String lastName = query.substring(0, commaIndex);
                            String firstName = query.substring(spaceIndex + 1);
                            lastName = lastName.substring(0, 1).toUpperCase() + lastName.substring(1);
                            firstName = firstName.substring(0, 1).toUpperCase() + firstName.substring(1);
                            String name = lastName + ", " + firstName;
                            if (names.contains(name)) {
                                findStudentEdit.setValue(name);
                                searchMessage.setVisible(false);
                            } else {

                            }
                        }
                    } else {
                        query = query.substring(0, 1).toUpperCase() + query.substring(1);
                        Student querySearch = database.find1(query);
                        if (querySearch != null) {
                            String name = querySearch.lastName + ", " + querySearch.firstName;
                            findStudentEdit.setValue(name);
                            searchMessage.setVisible(false);
                        }
                    }
                }
                searchName.clear();
            }
        });

        searchPhoneButton.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (searchPhone.getLength() != 0) {
                    String query = searchPhone.getText().replaceAll("\\D+", "");
                    Student potentialMatch = (Student) database.find2(query);
                    if (potentialMatch != null) {
                        String name = potentialMatch.lastName + ", " + potentialMatch.firstName;
                        findStudentEdit.setValue(name);
                    }
                    searchPhone.clear();
                }
            }
        });

        displayGoal.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (((String) displayGoal.getValue()).equals(theSeparator)) {
                    //displayGoal.getSelectionModel().clearSelection();
                    displayGoal.setValue(goalBackup);
                }
            }
        });
        
        /*
        displayGoal.setOnMouseReleased(new EventHandler<MouseEvent>() {
            public void handle(MouseEvent m) {
                if (displayGoal.getValue() == theSeparator) {
                    displayGoal.getSelectionModel().clearSelection();
                    displayGoal.setValue(null);
                    changeSecondGoal.setDisable(true);
                    displaySecondGoal.getSelectionModel().clearSelection();
                    displaySecondGoal.setValue(null);
                } else if (displayGoal.getValue() == null) {
                    changeSecondGoal.setDisable(true);
                } else {
                    changeSecondGoal.setDisable(false);
                }
            }
        });
        */

        displaySecondGoal.setOnMouseReleased(new EventHandler<MouseEvent>() {
            public void handle(MouseEvent m) {
                if (displaySecondGoal.getValue() == theSeparator) {
                    displaySecondGoal.getSelectionModel().clearSelection();
                    displaySecondGoal.setValue(null);
                }
            }
        });

        changeGoal.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                displayGoal.setDisable(false);
                changeGoal.setDisable(true);
            }
        });

        changeSecondGoal.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                displaySecondGoal.setDisable(false);
                changeSecondGoal.setDisable(true);
            }
        });

        saveChanges.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (firstNameField.getLength() == 0 || lastNameField.getLength() == 0
                        || phoneNumberField.getLength() == 0 || displayGoal.getValue() == null) {
                    incompleteInput.setFill(Color.FIREBRICK);
                    incompleteInput.setText("Please fill out all required fields!");
                } else {
                    if (popup.agreeToChanges) {
                        int index = names.indexOf("" + ((String) findStudentEdit.getValue()));
                        names.set(index, "" + lastNameField.getText() + ", " + firstNameField.getText());
                        String name = (String) findStudentEdit.getValue();
                        String lastName = name.substring(0, name.indexOf(","));
                        Student theStudent = (Student) database.find1(lastName);
                        Goal previousGoal = theStudent.goal;
                        Goal newGoal = new Goal(goalTree.find((String) displayGoal.getValue()));
                        Goal goal;
                        if (previousGoal != null) {
                            if (newGoal == null) {
                                goal = newGoal;
                            } else if (previousGoal.goal.equals(newGoal.goal)) {
                                goal = previousGoal;
                            } else {
                                goal = newGoal;
                            }
                        } else {
                            goal = newGoal;
                        }
                        Goal previousSecondGoal = theStudent.secondGoal;
                        Goal newSecondGoal = null;
                        if (displaySecondGoal.getValue() != null && !((String) displaySecondGoal.getValue()).equals("No current goal")) {
                            newSecondGoal = new Goal(goalTree.find((String) displaySecondGoal.getValue()));
                        }
                        Goal secondGoal;
                        if (previousSecondGoal == null && newSecondGoal == null) {
                            secondGoal = previousSecondGoal;
                        } else if (previousSecondGoal == null || newSecondGoal == null) {
                            secondGoal = newSecondGoal;
                        } else {
                            if (previousSecondGoal.goal.equals(newSecondGoal.goal)) {
                                secondGoal = previousSecondGoal;
                            } else {
                                secondGoal = newSecondGoal;
                            }
                        }
                        if (goal.goal.equals("No current goal") && secondGoal != null) {
                            goal = new Goal(secondGoal);
                            secondGoal = null;
                        }
                        Notes previousNotes = theStudent.notes;
                        Notes note;
                        if (previousNotes.notes.equals(noteArea.getText())
                                || (previousNotes.notes.equals(" ") && noteArea.getLength() == 0)) {
                            note = previousNotes;
                        } else {
                            note = new Notes(noteArea.getText());
                        }
                        Student updatedStudent = new Student(lastNameField.getText(), firstNameField.getText(),
                                phoneNumberField.getText(), emailField.getText(),
                                goal, note);
                        updatedStudent.setSecondGoal(secondGoal);
                        String previousPhoneNumber = database.find1(lastName).phoneNumber;
                        if (lastName.equals(lastNameField.getText())
                                && previousPhoneNumber.replaceAll("\\D+", "").equals(phoneNumberField.getText().replaceAll("\\D+", ""))) {
                            database.modify1(lastName, updatedStudent);
                        } else if (!lastName.equals(lastNameField.getText())
                                && previousPhoneNumber.replaceAll("\\D+", "").equals(phoneNumberField.getText().replaceAll("\\D+", ""))) {
                            database.change2(previousPhoneNumber.replaceAll("\\D+", ""), lastNameField.getText());
                            database.modify1(lastNameField.getText(), updatedStudent);
                        } else if (lastName.equals(lastNameField.getText())) {
                            database.change1(lastName, phoneNumberField.getText().replaceAll("\\D+", ""));
                            database.modify2(phoneNumberField.getText().replaceAll("\\D+", ""), updatedStudent);
                        } else {
                            database.change1(lastName, phoneNumberField.getText().replaceAll("\\D+", ""));
                            database.change2(phoneNumberField.getText().replaceAll("\\D+", ""), lastNameField.getText());
                            database.modify1(lastNameField.getText(), updatedStudent);
                        }

                        findStudentEdit.getSelectionModel().clearSelection();
                        findStudentEdit.setValue(null);
                        findStudentGoals.getSelectionModel().clearSelection();
                        findStudentGoals.setValue(null);
                        findStudentFlags.getSelectionModel().clearSelection();
                        findStudentFlags.setValue(null);
                        findStudentReports.getSelectionModel().clearSelection();
                        findStudentReports.setValue(null);
                        reportTimes.getSelectionModel().clearSelection();
                        reportTimes.setValue(null);

                        incompleteInput.setText("");

                        Object[] newNames = names.toArray();
                        Arrays.sort(newNames);

                        findStudentEdit.setItems(FXCollections.observableArrayList(newNames));
                        findStudentGoals.setItems(FXCollections.observableArrayList(newNames));
                        findStudentFlags.setItems(FXCollections.observableArrayList(newNames));
                        findStudentReports.setItems(FXCollections.observableArrayList(newNames));

                        popup.setAgreeToChanges(false);
                    } else {
                        areYouSure2.setVisible(false);
                        areYouSure3.setVisible(false);
                        areYouSure4.setVisible(false);
                        areYouSure5.setVisible(false);
                        areYouSure1.setVisible(true);
                        popup.setDeletingStudent(false);
                        popup.setUpdatingStudent(true);
                        popup.setDeletingUser(false);
                        popup.setDeletingGoal(false);
                        popup.setMarkingGoal1Complete(false);
                        popup.setMarkingGoal2Complete(false);
                        popup.setUpdatingUser(false);
                        popupStage.setScene(popupScene);
                        popupStage.show();
                    }
                }
            }
        });

        deleteStudent.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (popup.agreeToChanges) {
                    String currentStudent = (String) findStudentEdit.getValue();
                    names.remove(currentStudent);
                    database.remove1(currentStudent.substring(0, currentStudent.indexOf(",")));
                    Object[] updatedNames = names.toArray();
                    Arrays.sort(updatedNames);
                    findStudentEdit.setItems(FXCollections.observableArrayList(updatedNames));
                    findStudentReports.setItems(FXCollections.observableArrayList(updatedNames));
                    findStudentGoals.setItems(FXCollections.observableArrayList(updatedNames));
                    findStudentFlags.setItems(FXCollections.observableArrayList(updatedNames));
                    popup.setAgreeToChanges(false);
                } else {
                    areYouSure1.setVisible(false);
                    areYouSure3.setVisible(false);
                    areYouSure4.setVisible(false);
                    areYouSure5.setVisible(false);
                    areYouSure2.setVisible(true);
                    popup.setDeletingStudent(true);
                    popup.setUpdatingStudent(false);
                    popup.setDeletingUser(false);
                    popup.setUpdatingUser(false);
                    popup.setMarkingGoal1Complete(false);
                    popup.setMarkingGoal2Complete(false);
                    popup.setDeletingGoal(false);
                    popupStage.setScene(popupScene);
                    popupStage.show();
                }
            }
        });

        // "Student Goals" tab Actions
        searchButton2.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (searchName2.getLength() != 0) {
                    String query = searchName2.getText().toLowerCase();
                    int spaceIndex = query.indexOf(" ");
                    if (spaceIndex >= 0) {
                        int commaIndex = query.indexOf(",");
                        if (commaIndex < 0) {
                            String firstName = query.substring(0, spaceIndex);
                            String lastName = query.substring(spaceIndex + 1);
                            firstName = firstName.substring(0, 1).toUpperCase() + firstName.substring(1);
                            lastName = lastName.substring(0, 1).toUpperCase() + lastName.substring(1);
                            String name = lastName + ", " + firstName;
                            if (names.contains(name)) {
                                findStudentGoals.setValue(name);
                            } else if (names.contains(firstName + ", " + lastName)) {
                                findStudentGoals.setValue(firstName + ", " + lastName);
                            } else {

                            }
                        } else {
                            String lastName = query.substring(0, commaIndex);
                            String firstName = query.substring(spaceIndex + 1);
                            lastName = lastName.substring(0, 1).toUpperCase() + lastName.substring(1);
                            firstName = firstName.substring(0, 1).toUpperCase() + firstName.substring(1);
                            String name = lastName + ", " + firstName;
                            if (names.contains(name)) {
                                findStudentGoals.setValue(name);
                            } else {

                            }
                        }
                    } else {
                        query = query.substring(0, 1).toUpperCase() + query.substring(1);
                        Student querySearch = database.find1(query);
                        if (querySearch != null) {
                            String name = querySearch.lastName + ", " + querySearch.firstName;
                            findStudentGoals.setValue(name);
                        }
                    }
                }
                searchName2.clear();
            }
        });

        searchPhoneButton2.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (searchPhone2.getLength() != 0) {
                    String query = searchPhone2.getText().replaceAll("\\D+", "");
                    Student potentialMatch = (Student) database.find2(query);
                    if (potentialMatch != null) {
                        String name = potentialMatch.lastName + ", " + potentialMatch.firstName;
                        findStudentGoals.setValue(name);
                    }
                    searchPhone2.clear();
                }
            }
        });

        final ArrayList<CheckBox> checkBoxes = new ArrayList<CheckBox>();

        findStudentGoals.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                currentStudentGoal.clear();
                secondStudentGoal.clear();
                selectGoal1.setDisable(true);
                selectGoal2.setDisable(true);
                markGoal1Complete.setDisable(true);
                markGoal2Complete.setDisable(true);
                int size = checkBoxes.size();
                if (size > 0) {
                    goalsGrid.getChildren().remove(hbSaveGoalChanges1);
                    goalsGrid.getChildren().remove(hbSaveGoalChanges2);

                }
                int numChildren = goalsGrid.getChildren().size();
                for (int i = 0; i < size; i++) {
                    goalsGrid.getChildren().remove(numChildren - i - 1);
                }
                checkBoxes.clear();
                if (findStudentGoals.getValue() != null) {
                    String studentName = (String) findStudentGoals.getValue();
                    String lastName = studentName.substring(0, studentName.indexOf(","));
                    Student currentStudent = (Student) database.find1(lastName);
                    Goal currentGoal = currentStudent.goal;
                    if (currentGoal != null) {
                        currentStudentGoal.setText(currentGoal.goal);
                        selectGoal1.setDisable(false);
                        if (!currentGoal.goal.equals("No current goal")) {
                            markGoal1Complete.setDisable(false);
                        }
                    }
                    Goal secondaryGoal = currentStudent.secondGoal;
                    if (secondaryGoal != null) {
                        secondStudentGoal.setText(secondaryGoal.goal);
                        selectGoal2.setDisable(false);
                        markGoal2Complete.setDisable(false);
                    }
                }
            }
        });

        selectGoal1.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                int size = checkBoxes.size();
                if (size > 0) {
                    goalsGrid.getChildren().remove(hbSaveGoalChanges1);
                    goalsGrid.getChildren().remove(hbSaveGoalChanges2);
                }
                int numChildren = goalsGrid.getChildren().size();
                for (int i = 0; i < size; i++) {
                    goalsGrid.getChildren().remove(numChildren - i - 1);
                }
                checkBoxes.clear();
                String studentName = (String) findStudentGoals.getValue();
                String lastName = studentName.substring(0, studentName.indexOf(","));
                Student currentStudent = (Student) database.find1(lastName);
                Goal currentGoal = currentStudent.goal;
                int n = currentGoal.subgoals.size();
                for (int i = 0; i < n; i++) {
                    CheckBox currentSubgoal = new CheckBox(currentGoal.subgoals.get(i).subgoal);
                    currentSubgoal.setSelected(currentGoal.subgoals.get(i).isComplete);
                    goalsGrid.add(currentSubgoal, 1, 6 + i, 2, 1);
                    checkBoxes.add(currentSubgoal);
                }
                if (n > 0) {
                    goalsGrid.add(hbSaveGoalChanges1, 1, 7 + n);
                }
            }
        });

        markGoal1Complete.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (popup.agreeToChanges) {
                    String studentName = (String) findStudentGoals.getValue();
                    String lastName = studentName.substring(0, studentName.indexOf(","));
                    Student currentStudent = database.find1(lastName);
                    Student updatedStudent = new Student(currentStudent.lastName, currentStudent.firstName,
                            currentStudent.phoneNumber, currentStudent.emailAddress,
                            goalTree.find("No current goal"), currentStudent.notes);
                    updatedStudent.goalsCompleted = currentStudent.goalsCompleted + 1;
                    if (currentStudent.secondGoal != null) {
                        updatedStudent.setSecondGoal(new Goal(currentStudent.secondGoal));
                    }
                    database.modify1(lastName, updatedStudent);
                    popup.setAgreeToChanges(false);
                    findStudentGoals.getSelectionModel().clearSelection();
                    findStudentGoals.setValue(null);
                } else {
                    areYouSure5.setVisible(true);
                    areYouSure1.setVisible(false);
                    areYouSure2.setVisible(false);
                    areYouSure3.setVisible(false);
                    areYouSure4.setVisible(false);
                    popup.setMarkingGoal1Complete(true);
                    popup.setMarkingGoal2Complete(false);
                    popup.setUpdatingUser(false);
                    popup.setDeletingUser(false);
                    popup.setUpdatingStudent(false);
                    popup.setDeletingStudent(false);
                    popup.setDeletingGoal(false);
                    popupStage.setScene(popupScene);
                    popupStage.show();
                }
            }
        });

        selectGoal2.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                int size = checkBoxes.size();
                if (size > 0) {
                    goalsGrid.getChildren().remove(hbSaveGoalChanges1);
                    goalsGrid.getChildren().remove(hbSaveGoalChanges2);

                }
                int numChildren = goalsGrid.getChildren().size();
                for (int i = 0; i < size; i++) {
                    goalsGrid.getChildren().remove(numChildren - i - 1);
                }
                checkBoxes.clear();
                String studentName = (String) findStudentGoals.getValue();
                String lastName = studentName.substring(0, studentName.indexOf(","));
                Student currentStudent = (Student) database.find1(lastName);
                Goal currentGoal = currentStudent.secondGoal;
                int n = currentGoal.subgoals.size();
                for (int i = 0; i < n; i++) {
                    CheckBox currentSubgoal = new CheckBox(currentGoal.subgoals.get(i).subgoal);
                    currentSubgoal.setSelected(currentGoal.subgoals.get(i).isComplete);
                    goalsGrid.add(currentSubgoal, 1, 6 + i, 2, 1);
                    checkBoxes.add(currentSubgoal);
                }
                if (n > 0) {
                    goalsGrid.add(hbSaveGoalChanges2, 1, 7 + n);
                }
            }
        });

        markGoal2Complete.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (popup.agreeToChanges) {
                    String studentName = (String) findStudentGoals.getValue();
                    String lastName = studentName.substring(0, studentName.indexOf(","));
                    Student currentStudent = database.find1(lastName);
                    currentStudent.setSecondGoal(null);
                    currentStudent.goalsCompleted = currentStudent.goalsCompleted + 1;
                    database.modify1(lastName, currentStudent);
                    popup.setAgreeToChanges(false);
                    findStudentGoals.getSelectionModel().clearSelection();
                    findStudentGoals.setValue(null);
                } else {
                    areYouSure5.setVisible(true);
                    areYouSure1.setVisible(false);
                    areYouSure2.setVisible(false);
                    areYouSure3.setVisible(false);
                    areYouSure4.setVisible(false);
                    popup.setMarkingGoal2Complete(true);
                    popup.setMarkingGoal1Complete(false);
                    popup.setUpdatingUser(false);
                    popup.setDeletingUser(false);
                    popup.setUpdatingStudent(false);
                    popup.setDeletingStudent(false);
                    popup.setDeletingGoal(false);
                    popupStage.setScene(popupScene);
                    popupStage.show();
                }
            }
        });

        saveGoalChanges1.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                String studentName = (String) findStudentGoals.getValue();
                String lastName = studentName.substring(0, studentName.indexOf(","));
                Student currentStudent = (Student) database.find1(lastName);
                Goal currentGoal = currentStudent.goal;
                int size = checkBoxes.size();
                for (int i = 0; i < size; i++) {
                    currentGoal.subgoals.get(i).setComplete(checkBoxes.get(i).isSelected());
                }
                database.modify1(lastName, new Student(currentStudent.lastName, currentStudent.firstName,
                        currentStudent.phoneNumber, currentStudent.emailAddress,
                        new Goal(currentGoal), currentStudent.notes));
                findStudentGoals.getSelectionModel().clearSelection();
                findStudentGoals.setValue(null);
                findStudentReports.getSelectionModel().clearSelection();
                findStudentReports.setValue(null);
            }
        });

        saveGoalChanges2.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                String studentName = (String) findStudentGoals.getValue();
                String lastName = studentName.substring(0, studentName.indexOf(","));
                Student currentStudent = (Student) database.find1(lastName);
                Goal currentGoal = currentStudent.secondGoal;
                int size = checkBoxes.size();
                for (int i = 0; i < size; i++) {
                    currentGoal.subgoals.get(i).setComplete(checkBoxes.get(i).isSelected());
                }
                database.modify1(lastName, new Student(currentStudent.lastName, currentStudent.firstName,
                        currentStudent.phoneNumber, currentStudent.emailAddress,
                        currentGoal, currentStudent.notes));
                findStudentGoals.getSelectionModel().clearSelection();
                findStudentGoals.setValue(null);
                findStudentReports.getSelectionModel().clearSelection();
                findStudentReports.setValue(null);
            }
        });

        // "New Student" tab Actions
        hasEmail.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (hasEmail.isSelected()) {
                    goals2.setValue("Create an email address");
                }
            }
        });

        addStudent.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (firstNameField2.getLength() == 0 || lastNameField2.getLength() == 0
                        || phoneNumberField2.getLength() == 0 || goals2.getValue() == null) {
                    studentAdded.setFill(Color.FIREBRICK);
                    studentAdded.setText("Please fill out all required fields!");
                } else {
                    names.add("" + lastNameField2.getText() + ", " + firstNameField2.getText());
                    Object[] newNames = names.toArray();
                    Arrays.sort(newNames);
                    findStudentEdit.setItems(FXCollections.observableArrayList(newNames));
                    findStudentReports.setItems(FXCollections.observableArrayList(newNames));
                    findStudentGoals.setItems(FXCollections.observableArrayList(newNames));
                    findStudentFlags.setItems(FXCollections.observableArrayList(newNames));
                    Student newStudent = new Student(lastNameField2.getText(),
                            firstNameField2.getText(),
                            phoneNumberField2.getText(),
                            emailField2.getText(), new Goal(goalTree.find((String) goals2.getValue())), new Notes(noteArea2.getText()));
                    if (secondGoals2.getValue() != null) {
                        newStudent.setSecondGoal(new Goal(goalTree.find((String) secondGoals2.getValue())));
                    }
                    database.add(lastNameField2.getText(), phoneNumberField2.getText().replaceAll("\\D+", ""), newStudent);
                    firstNameField2.clear();
                    lastNameField2.clear();
                    emailField2.clear();
                    phoneNumberField2.clear();
                    goals2.getSelectionModel().clearSelection();
                    goals2.setValue(null);
                    secondGoals2.getSelectionModel().clearSelection();
                    secondGoals2.setValue(null);
                    noteArea2.clear();
                    studentAdded.setFill(Color.FIREBRICK);
                    studentAdded.setText("Student added successfully!");
                }
            }
        }
        );

        firstNameField2.setOnKeyPressed(new EventHandler<KeyEvent>() {
            public void handle(KeyEvent k) {
                studentAdded.setText("");
            }
        });

        // "Flags" tab Actions
        searchButtonFlags.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (searchNameFlags.getLength() != 0) {
                    String query = searchNameFlags.getText().toLowerCase();
                    int spaceIndex = query.indexOf(" ");
                    if (spaceIndex >= 0) {
                        int commaIndex = query.indexOf(",");
                        if (commaIndex < 0) {
                            String firstName = query.substring(0, spaceIndex);
                            String lastName = query.substring(spaceIndex + 1);
                            firstName = firstName.substring(0, 1).toUpperCase() + firstName.substring(1);
                            lastName = lastName.substring(0, 1).toUpperCase() + lastName.substring(1);
                            String name = lastName + ", " + firstName;
                            if (names.contains(name)) {
                                findStudentFlags.setValue(name);
                            } else if (names.contains(firstName + ", " + lastName)) {
                                findStudentFlags.setValue(firstName + ", " + lastName);
                            } else {

                            }
                        } else {
                            String lastName = query.substring(0, commaIndex);
                            String firstName = query.substring(spaceIndex + 1);
                            lastName = lastName.substring(0, 1).toUpperCase() + lastName.substring(1);
                            firstName = firstName.substring(0, 1).toUpperCase() + firstName.substring(1);
                            String name = lastName + ", " + firstName;
                            if (names.contains(name)) {
                                findStudentFlags.setValue(name);
                            } else {

                            }
                        }
                    } else {
                        query = query.substring(0, 1).toUpperCase() + query.substring(1);
                        Student querySearch = database.find1(query);
                        if (querySearch != null) {
                            String name = querySearch.lastName + ", " + querySearch.firstName;
                            findStudentFlags.setValue(name);
                        }
                    }
                }
                searchNameFlags.clear();
            }
        });

        searchPhoneButtonFlags.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (searchPhoneFlags.getLength() != 0) {
                    String query = searchPhoneFlags.getText().replaceAll("\\D+", "");
                    Student potentialMatch = (Student) database.find2(query);
                    if (potentialMatch != null) {
                        String name = potentialMatch.lastName + ", " + potentialMatch.firstName;
                        findStudentFlags.setValue(name);
                    }
                    searchPhoneFlags.clear();
                }
            }
        });

        findStudentFlags.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                timeSince.clear();
                //saveTime.setDisable(true);
                if (findStudentFlags.getValue() != null) {
                    Date currentTime = new Date();
                    String studentName = (String) findStudentFlags.getValue();
                    Student currentStudent = database.find1(studentName.substring(0, studentName.indexOf(",")));
                    double difference = (currentTime.getTime() - currentStudent.lastUpdate.getTime()) / 86400000.0;
                    int differenceDays = (int) difference;
                    double fractionalDay = difference - differenceDays;
                    double fractionalDayInHours = fractionalDay * 24;
                    int differenceHours = (int) fractionalDayInHours;
                    double fractionalHours = fractionalDayInHours - differenceHours;
                    double fractionalHoursInMinutes = fractionalHours * 60;
                    int differenceMinutes = (int) fractionalHoursInMinutes;
                    timeSince.setText("" + differenceDays + " days, " + differenceHours + " hours, and "
                            + differenceMinutes + " minutes");
                    //saveTime.setDisable(false);
                }
            }
        });

        /*
         saveTime.setOnAction(new EventHandler<ActionEvent>() {
         public void handle(ActionEvent t) {
         if (timeSince.getLength() == 0) {

         } else {
         String student = (String) findStudentFlags.getValue();
         String lastName = student.substring(0, student.indexOf(","));
         Student currentStudent = database.find1(lastName);
         currentStudent.hoursSince = Integer.parseInt(timeSince.getText());
         database.modify1(lastName, currentStudent);
         findStudentFlags.getSelectionModel().clearSelection();
         findStudentFlags.setValue(null);
         reportTimes.getSelectionModel().clearSelection();
         reportTimes.setValue(null);
         }
         }
         });
         */
        reportTimes.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                printBtn.setDisable(true);
                studentList.clear();
                if (reportTimes.getValue() != null) {
                    printBtn.setDisable(false);
                    Date currentTime = new Date();
                    String listOfStudents = "";
                    Student currentStudent;
                    AIUTreeIterator flagIterator = new AIUTreeIterator(database.tree1);
                    if (reportTimes.getValue().equals("0-2 weeks")) {
                        while (flagIterator.hasNext()) {
                            currentStudent = (Student) flagIterator.next().data;
                            double difference = (currentTime.getTime() - currentStudent.lastUpdate.getTime()) / 86400000.0;
                            int differenceDays = (int) difference;
                            if (differenceDays <= 13) {
                                listOfStudents += currentStudent.firstName + " " + currentStudent.lastName + "\n";
                            }
                        }
                    } else if (reportTimes.getValue().equals("2-4 weeks")) {
                        while (flagIterator.hasNext()) {
                            currentStudent = (Student) flagIterator.next().data;
                            double difference = (currentTime.getTime() - currentStudent.lastUpdate.getTime()) / 86400000.0;
                            int differenceDays = (int) difference;
                            if (differenceDays > 13 && differenceDays <= 27) {
                                listOfStudents += currentStudent.firstName + " " + currentStudent.lastName + "\n";
                            }
                        }
                    } else if (reportTimes.getValue().equals("4-6 weeks")) {
                        while (flagIterator.hasNext()) {
                            currentStudent = (Student) flagIterator.next().data;
                            double difference = (currentTime.getTime() - currentStudent.lastUpdate.getTime()) / 86400000.0;
                            int differenceDays = (int) difference;
                            if (differenceDays > 27 && differenceDays <= 41) {
                                listOfStudents += currentStudent.firstName + " " + currentStudent.lastName + "\n";
                            }
                        }
                    } else {
                        while (flagIterator.hasNext()) {
                            currentStudent = (Student) flagIterator.next().data;
                            double difference = (currentTime.getTime() - currentStudent.lastUpdate.getTime()) / 86400000.0;
                            int differenceDays = (int) difference;
                            if (differenceDays > 41) {
                                listOfStudents += currentStudent.firstName + " " + currentStudent.lastName + "\n";
                            }
                        }
                    }
                    studentList.setText(listOfStudents);
                }
            }
        });

        printBtn.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {

            }
        });

        // "Reports" tab Actions
        searchButton3.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (searchName3.getLength() != 0) {
                    String query = searchName3.getText().toLowerCase();
                    int spaceIndex = query.indexOf(" ");
                    if (spaceIndex >= 0) {
                        int commaIndex = query.indexOf(",");
                        if (commaIndex < 0) {
                            String firstName = query.substring(0, spaceIndex);
                            String lastName = query.substring(spaceIndex + 1);
                            firstName = firstName.substring(0, 1).toUpperCase() + firstName.substring(1);
                            lastName = lastName.substring(0, 1).toUpperCase() + lastName.substring(1);
                            String name = lastName + ", " + firstName;
                            if (names.contains(name)) {
                                findStudentReports.setValue(name);
                            } else if (names.contains(firstName + ", " + lastName)) {
                                findStudentReports.setValue(firstName + ", " + lastName);
                            } else {

                            }
                        } else {
                            String lastName = query.substring(0, commaIndex);
                            String firstName = query.substring(spaceIndex + 1);
                            lastName = lastName.substring(0, 1).toUpperCase() + lastName.substring(1);
                            firstName = firstName.substring(0, 1).toUpperCase() + firstName.substring(1);
                            String name = lastName + ", " + firstName;
                            if (names.contains(name)) {
                                findStudentReports.setValue(name);
                            } else {

                            }
                        }
                    } else {
                        query = query.substring(0, 1).toUpperCase() + query.substring(1);
                        Student querySearch = database.find1(query);
                        if (querySearch != null) {
                            String name = querySearch.lastName + ", " + querySearch.firstName;
                            findStudentReports.setValue(name);
                        }
                    }
                }
                searchName3.clear();
            }
        });

        searchPhoneButton3.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (searchPhone3.getLength() != 0) {
                    String query = searchPhone3.getText().replaceAll("\\D+", "");
                    Student potentialMatch = (Student) database.find2(query);
                    if (potentialMatch != null) {
                        String name = potentialMatch.lastName + ", " + potentialMatch.firstName;
                        findStudentReports.setValue(name);
                    }
                    searchPhone3.clear();
                }
            }
        });

        findStudentReports.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                studentName.clear();
                primaryStudentGoal.clear();
                secondaryStudentGoal.clear();
                selectGoalReport1.setDisable(true);
                selectGoalReport2.setDisable(true);
                goalsCompleted.setVisible(false);
                progressLabel.setVisible(false);
                goalProgress.setVisible(false);
                printReport.setDisable(true);
                completedSubgoalsList.clear();
                remainingSubgoalsList.clear();
                if (findStudentReports.getValue() != null) {
                    final String choice2 = (String) findStudentReports.getValue();
                    String firstName = choice2.substring(choice2.indexOf(" ") + 1);
                    String lastName = choice2.substring(0, choice2.indexOf(","));
                    studentName.insertText(0, firstName + " " + lastName);
                    Student currentStudent = database.find1(lastName);
                    if (currentStudent.goal != null) {
                        primaryStudentGoal.setText(currentStudent.goal.goal);
                        selectGoalReport1.setDisable(false);
                    }
                    if (currentStudent.secondGoal != null) {
                        secondaryStudentGoal.setText(currentStudent.secondGoal.goal);
                        selectGoalReport2.setDisable(false);
                    }
                    goalsCompleted.setText("Goals completed: " + currentStudent.goalsCompleted);
                    goalsCompleted.setVisible(true);
                }
            }
        });

        selectGoalReport1.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                String currentName = (String) findStudentReports.getValue();
                String lastName = currentName.substring(0, currentName.indexOf(","));
                Student currentStudent = database.find1(lastName);
                int numSubgoals = currentStudent.goal.subgoals.size();
                int numCompleted = currentStudent.goal.numCompletedSubgoals();
                progressLabel.setText("Progress towards current goal: " + numCompleted * 100.0 / numSubgoals + "%");
                goalProgress.setProgress(numCompleted * 1.0 / numSubgoals);
                progressLabel.setVisible(true);
                goalProgress.setVisible(true);
                printReport.setDisable(false);
                String completedSubgoals = "";
                String remainingSubgoals = "";
                for (Subgoal subgoal : currentStudent.goal.subgoals) {
                    if (subgoal.isComplete) {
                        completedSubgoals += subgoal.subgoal + "\n";
                    } else {
                        remainingSubgoals += subgoal.subgoal + "\n";
                    }
                }
                completedSubgoalsList.setText(completedSubgoals);
                remainingSubgoalsList.setText(remainingSubgoals);
            }
        });

        selectGoalReport2.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                String currentName = (String) findStudentReports.getValue();
                String lastName = currentName.substring(0, currentName.indexOf(","));
                Student currentStudent = database.find1(lastName);
                int numSubgoals = currentStudent.secondGoal.subgoals.size();
                int numCompleted = currentStudent.secondGoal.numCompletedSubgoals();
                progressLabel.setText("Progress towards current goal: " + df.format(numCompleted * 100.0 / numSubgoals) + "%");
                goalProgress.setProgress(numCompleted * 1.0 / numSubgoals);
                progressLabel.setVisible(true);
                goalProgress.setVisible(true);
                printReport.setDisable(false);
                String completedSubgoals = "";
                String remainingSubgoals = "";
                for (Subgoal subgoal : currentStudent.secondGoal.subgoals) {
                    if (subgoal.isComplete) {
                        completedSubgoals += subgoal.subgoal + "\n";
                    } else {
                        remainingSubgoals += subgoal.subgoal + "\n";
                    }
                }
                completedSubgoalsList.setText(completedSubgoals);
                remainingSubgoalsList.setText(remainingSubgoals);
            }
        });

        printReport.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {

            }
        });

        printReportAll.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {

            }
        });

        // "Administration" tab actions
        userList.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                username.clear();
                password.clear();
                confirmPassword.clear();
                userFirstName.clear();
                userLastName.clear();
                isAdministrator.setDisable(false);
                deleteUser.setDisable(false);
                if (userList.getValue() != null) {
                    username.setEditable(true);
                    password.setEditable(true);
                    confirmPassword.setEditable(true);
                    userFirstName.setEditable(true);
                    userLastName.setEditable(true);
                    setAdmin.setVisible(true);
                    isAdministrator.setVisible(true);
                    hbSaveUserChanges.setVisible(true);
                    hbDeleteUser.setVisible(true);
                    String currentUserSelected = (String) userList.getValue();
                    int userIndex = usernames.indexOf(currentUserSelected);
                    UserAndPass currentUserAndPass = userTree.find(currentUserSelected);
                    username.insertText(0, currentUserAndPass.username);
                    password.insertText(0, currentUserAndPass.password);
                    confirmPassword.insertText(0, currentUserAndPass.password);
                    userFirstName.setText(currentUserAndPass.firstName);
                    userLastName.setText(currentUserAndPass.lastName);
                    if (currentUserAndPass.isAdmin) {
                        isAdministrator.setValue("Yes");
                    } else {
                        isAdministrator.setValue("No");
                    }
                    if (currentUser.username.equals(currentUserSelected)) {
                        isAdministrator.setDisable(true);
                        deleteUser.setDisable(true);
                    }
                } else {
                    username.setEditable(false);
                    password.setEditable(false);
                    confirmPassword.setEditable(false);
                    setAdmin.setVisible(false);
                    isAdministrator.setVisible(false);
                    hbSaveUserChanges.setVisible(false);
                    hbDeleteUser.setVisible(false);
                }
            }
        });

        saveUserChanges.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (username.getLength() == 0 || password.getLength() == 0
                        || confirmPassword.getLength() == 0
                        || userFirstName.getLength() == 0
                        || userLastName.getLength() == 0) {
                    userChangesFailed.setVisible(true);
                } else {
                    userChangesFailed.setVisible(false);
                    if (username.getText() != (String) userList.getValue()
                            && usernames.contains(username.getText())) {
                        usernameMatch1.setVisible(true);
                    } else {
                        usernameMatch1.setVisible(false);
                        if (password.getText().equals(confirmPassword.getText())) {
                            if (popup.agreeToChanges) {
                                int userIndex = usernames.indexOf((String) userList.getValue());
                                usernames.set(userIndex, username.getText());
                                UserAndPass updatedUser = new UserAndPass(username.getText(),
                                        password.getText(), userFirstName.getText(), userLastName.getText());
                                if (((String) isAdministrator.getValue()).equals("Yes")) {
                                    updatedUser.setAdmin(true);
                                } else {
                                    updatedUser.setAdmin(false);
                                }
                                userTree.modify((String) userList.getValue(), updatedUser);

                                userList.getSelectionModel().clearSelection();
                                userList.setValue(null);

                                userList.setItems(FXCollections.observableArrayList(usernames));

                                popup.setAgreeToChanges(false);
                                hbSaveUserChanges.setVisible(false);
                                hbDeleteUser.setVisible(false);
                            } else {
                                passwordMatch1.setVisible(false);
                                areYouSure1.setVisible(true);
                                areYouSure2.setVisible(false);
                                areYouSure3.setVisible(false);
                                areYouSure4.setVisible(false);
                                areYouSure5.setVisible(false);
                                popup.setUpdatingUser(true);
                                popup.setDeletingUser(false);
                                popup.setUpdatingStudent(false);
                                popup.setDeletingStudent(false);
                                popup.setMarkingGoal1Complete(false);
                                popup.setMarkingGoal2Complete(false);
                                popup.setDeletingGoal(false);
                                popupStage.setScene(popupScene);
                                popupStage.show();
                            }
                        } else {
                            passwordMatch1.setVisible(true);
                        }
                    }
                }
            }
        });

        deleteUser.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (popup.agreeToChanges) {
                    passwordMatch1.setVisible(false);
                    String currentUser = (String) userList.getValue();
                    usernames.remove(currentUser);
                    userTree.remove(currentUser);
                    userList.setItems(FXCollections.observableArrayList(usernames));
                    popup.setAgreeToChanges(false);
                    hbSaveUserChanges.setVisible(false);
                    hbDeleteUser.setVisible(false);
                } else {
                    areYouSure3.setVisible(true);
                    areYouSure1.setVisible(false);
                    areYouSure2.setVisible(false);
                    areYouSure4.setVisible(false);
                    areYouSure5.setVisible(false);
                    popup.setDeletingUser(true);
                    popup.setUpdatingUser(false);
                    popup.setDeletingStudent(false);
                    popup.setUpdatingStudent(false);
                    popup.setDeletingGoal(false);
                    popup.setMarkingGoal1Complete(false);
                    popup.setMarkingGoal2Complete(false);
                    popupStage.setScene(popupScene);
                    popupStage.show();
                }
            }
        });

        addNewUser.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (newUsername.getLength() == 0 || newPassword.getLength() == 0
                        || confirmNewPassword.getLength() == 0
                        || userFirstName2.getLength() == 0
                        || userLastName2.getLength() == 0
                        || isAdministrator2.getValue() == null) {
                    newUserAdded.setVisible(true);
                } else {
                    newUserAdded.setVisible(false);
                    if (usernames.contains(newUsername.getText())) {
                        usernameMatch2.setVisible(true);
                    } else {
                        if (newPassword.getText().equals(confirmNewPassword.getText())) {
                            UserAndPass newUser = new UserAndPass(newUsername.getText(),
                                    newPassword.getText(), userFirstName2.getText(), userLastName2.getText());
                            if (((String) isAdministrator2.getValue()).equals("Yes")) {
                                newUser.setAdmin(true);
                            } else {
                                newUser.setAdmin(false);
                            }
                            usernames.add(newUsername.getText());
                            userTree.add(newUsername.getText(), newUser);
                            userList.setItems(FXCollections.observableArrayList(usernames));
                            newUsername.clear();
                            newPassword.clear();
                            confirmNewPassword.clear();
                            userFirstName2.clear();
                            userLastName2.clear();
                            isAdministrator2.getSelectionModel().clearSelection();
                            isAdministrator2.setValue(null);
                        } else {
                            passwordMatch2.setVisible(true);
                        }
                    }
                }
            }
        });

        //"Manage Goals" tab actions
        createdGoal.setOnKeyReleased(new EventHandler<KeyEvent>() {
            public void handle(KeyEvent k) {
                if (createdGoal.getLength() == 0) {
                    addGoal.setDisable(true);
                } else {
                    if (selectGoalType.getValue() != null) {
                        addGoal.setDisable(false);
                    }
                }
            }
        });

        selectGoalType.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (selectGoalType.getValue() != null && createdGoal.getLength() != 0) {
                    addGoal.setDisable(false);
                } else {
                    addGoal.setDisable(false);
                }
            }
        });

        final ArrayList<CheckBox> checkBoxes2 = new ArrayList<CheckBox>();
        final ArrayList<TextField> textFields = new ArrayList<TextField>();

        listOfGoals.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                saveGoal.setDisable(true);
                int size = checkBoxes2.size();
                manageGoalsGrid.getChildren().remove(addSubgoalLabel);
                manageGoalsGrid.getChildren().remove(newSubgoal);
                manageGoalsGrid.getChildren().remove(hbAddSubgoal);
                manageGoalsGrid.getChildren().remove(hbDeleteGoal);
                if (size > 0) {
                    manageGoalsGrid.getChildren().remove(hbDeleteSubgoals);
                    manageGoalsGrid.getChildren().remove(hbUpdateOrder);
                }
                int numChildren = manageGoalsGrid.getChildren().size();
                for (int i = 0; i < 2 * size; i++) {
                    manageGoalsGrid.getChildren().remove(numChildren - i - 1);
                }
                checkBoxes2.clear();
                textFields.clear();
                if (listOfGoals.getValue() != null && ((String) listOfGoals.getValue()).equals(theSeparator)) {
                    listOfGoals.getSelectionModel().clearSelection();
                    listOfGoals.setValue(null);
                }
                if (listOfGoals.getValue() != null ) {
                    goalStatement.setText((String) listOfGoals.getValue());
                    editGoal.setDisable(false);
                    Goal currentGoal = goalTree.find((String) listOfGoals.getValue());
                    int n = currentGoal.subgoals.size();
                    for (int i = 0; i < n; i++) {
                        CheckBox currentSubgoal = new CheckBox(currentGoal.subgoals.get(i).subgoal);
                        manageGoalsGrid.add(currentSubgoal, 1, 10 + i, 2, 1);
                        checkBoxes2.add(currentSubgoal);
                        TextField currentTextField = new TextField("" + (i + 1));
                        manageGoalsGrid.add(currentTextField, 3, 10 + i);
                        textFields.add(currentTextField);
                    }
                    if (n > 0) {
                        manageGoalsGrid.add(hbDeleteSubgoals, 3, 11 + n, 2, 1);
                        manageGoalsGrid.add(hbUpdateOrder, 1, 11 + n, 2, 1);
                    }
                    manageGoalsGrid.add(addSubgoalLabel, 0, 13 + n);
                    manageGoalsGrid.add(newSubgoal, 1, 13 + n, 2, 1);
                    manageGoalsGrid.add(hbAddSubgoal, 3, 13 + n, 2, 1);
                    manageGoalsGrid.add(hbDeleteGoal, 1, 16 + n, 3, 1);
                } else {
                    goalStatement.clear();
                    editGoal.setDisable(true);
                }
            }
        });

        addGoal.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                addGoal.setDisable(true);
                Goal newGoal = new Goal(createdGoal.getText());
                String goalType = (String) selectGoalType.getValue();
                if (goalType.equals("Civics")) {
                    newGoal.goalType = GoalType.CIVICS;
                    civicsGoals.add(createdGoal.getText());
                } else if (goalType.equals("Job")) {
                    newGoal.goalType = GoalType.JOB;
                    jobGoals.add(createdGoal.getText());
                } else if (goalType.equals("Post-secondary")) {
                    newGoal.goalType = GoalType.POSTSEC;
                    postsecGoals.add(createdGoal.getText());
                } else {
                    newGoal.goalType = GoalType.OTHER;
                    otherGoals.add(createdGoal.getText());
                }
                goalTree.add(createdGoal.getText(), newGoal);
                createdGoal.clear();
                selectGoalType.getSelectionModel().clearSelection();
                selectGoalType.setValue(null);
                displayGoal.getItems().clear();
                displayGoal.getItems().addAll(civicsGoals);
                if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                    displayGoal.getItems().add(theSeparator);
                }
                displayGoal.getItems().addAll(jobGoals);
                if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                    displayGoal.getItems().add(theSeparator);
                }
                displayGoal.getItems().addAll(postsecGoals);
                if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
                    displayGoal.getItems().add(theSeparator);
                }
                displayGoal.getItems().addAll(otherGoals);
                displaySecondGoal.getItems().clear();
                displaySecondGoal.getItems().addAll(civicsGoals);
                if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                    displaySecondGoal.getItems().add(theSeparator);
                }
                displaySecondGoal.getItems().addAll(jobGoals);
                if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                    displaySecondGoal.getItems().add(theSeparator);
                }
                displaySecondGoal.getItems().addAll(postsecGoals);
                if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
                    displaySecondGoal.getItems().add(theSeparator);
                }
                displaySecondGoal.getItems().addAll(otherGoals);
                goals2.getItems().clear();
                goals2.getItems().addAll(civicsGoals);
                if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                    goals2.getItems().add(theSeparator);
                }
                goals2.getItems().addAll(jobGoals);
                if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                    goals2.getItems().add(theSeparator);
                }
                goals2.getItems().addAll(postsecGoals);
                if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
                    goals2.getItems().add(theSeparator);
                }
                goals2.getItems().addAll(otherGoals);
                secondGoals2.getItems().clear();
                secondGoals2.getItems().addAll(civicsGoals);
                if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                    secondGoals2.getItems().add(theSeparator);
                }
                secondGoals2.getItems().addAll(jobGoals);
                if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                    secondGoals2.getItems().add(theSeparator);
                }
                secondGoals2.getItems().addAll(postsecGoals);
                if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
                    secondGoals2.getItems().add(theSeparator);
                }
                secondGoals2.getItems().addAll(otherGoals);
                listOfGoals.getItems().clear();
                listOfGoals.getItems().addAll(civicsGoals);
                if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                    listOfGoals.getItems().add(theSeparator);
                }
                listOfGoals.getItems().addAll(jobGoals);
                if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                    listOfGoals.getItems().add(theSeparator);
                }
                listOfGoals.getItems().addAll(postsecGoals);
                if (postsecGoals.size() != 0 && otherGoals.size() != 1) {
                    listOfGoals.getItems().add(theSeparator);
                }
                listOfGoals.getItems().addAll(otherGoals);
                listOfGoals.getItems().remove("No current goal");
                findStudentEdit.getSelectionModel().clearSelection();
                findStudentEdit.setValue(null);
                findStudentGoals.getSelectionModel().clearSelection();
                findStudentGoals.setValue(null);
                findStudentReports.getSelectionModel().clearSelection();
                findStudentReports.setValue(null);
            }
        });

        editGoal.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (goalStatement.getLength() != 0) {
                    goalStatement.setEditable(true);
                    editGoal.setDisable(true);
                    saveGoal.setDisable(false);
                }
            }
        });

        saveGoal.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (goalStatement.getLength() != 0) {
                    String oldGoalStatement = (String) listOfGoals.getValue();
                    String newGoalStatement = goalStatement.getText();
                    Goal oldGoal = (Goal) goalTree.find(oldGoalStatement);
                    goalTree.remove(oldGoalStatement);
                    oldGoal.goal = newGoalStatement;
                    goalTree.add(newGoalStatement, new Goal(oldGoal));
                    goalStatement.clear();
                    saveGoal.setDisable(true);
                    listOfGoals.getSelectionModel().clearSelection();
                    listOfGoals.setValue(null);
                    if (oldGoal.goalType == GoalType.CIVICS) {
                        civicsGoals.set(civicsGoals.indexOf(oldGoalStatement), newGoalStatement);
                    } else if (oldGoal.goalType == GoalType.JOB) {
                        jobGoals.set(jobGoals.indexOf(oldGoalStatement), newGoalStatement);
                    } else if (oldGoal.goalType == GoalType.POSTSEC) {
                        postsecGoals.set(postsecGoals.indexOf(oldGoalStatement), newGoalStatement);
                    } else {
                        otherGoals.set(otherGoals.indexOf(oldGoalStatement), newGoalStatement);
                    }
                    displayGoal.getItems().clear();
                    displayGoal.getItems().addAll(civicsGoals);
                    if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                        displayGoal.getItems().add(theSeparator);
                    }
                    displayGoal.getItems().addAll(jobGoals);
                    if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                        displayGoal.getItems().add(theSeparator);
                    }
                    displayGoal.getItems().addAll(postsecGoals);
                    if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
                        displayGoal.getItems().add(theSeparator);
                    }
                    displayGoal.getItems().addAll(otherGoals);
                    displaySecondGoal.getItems().clear();
                    displaySecondGoal.getItems().addAll(civicsGoals);
                    if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                        displaySecondGoal.getItems().add(theSeparator);
                    }
                    displaySecondGoal.getItems().addAll(jobGoals);
                    if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                        displaySecondGoal.getItems().add(theSeparator);
                    }
                    displaySecondGoal.getItems().addAll(postsecGoals);
                    if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
                        displaySecondGoal.getItems().add(theSeparator);
                    }
                    displaySecondGoal.getItems().addAll(otherGoals);
                    goals2.getItems().clear();
                    goals2.getItems().addAll(civicsGoals);
                    if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                        goals2.getItems().add(theSeparator);
                    }
                    goals2.getItems().addAll(jobGoals);
                    if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                        goals2.getItems().add(theSeparator);
                    }
                    goals2.getItems().addAll(postsecGoals);
                    if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
                        goals2.getItems().add(theSeparator);
                    }
                    goals2.getItems().addAll(otherGoals);
                    secondGoals2.getItems().clear();
                    secondGoals2.getItems().addAll(civicsGoals);
                    if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                        secondGoals2.getItems().add(theSeparator);
                    }
                    secondGoals2.getItems().addAll(jobGoals);
                    if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                        secondGoals2.getItems().add(theSeparator);
                    }
                    secondGoals2.getItems().addAll(postsecGoals);
                    if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
                        secondGoals2.getItems().add(theSeparator);
                    }
                    secondGoals2.getItems().addAll(otherGoals);
                    listOfGoals.getItems().clear();
                    listOfGoals.getItems().addAll(civicsGoals);
                    if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                        listOfGoals.getItems().add(theSeparator);
                    }
                    listOfGoals.getItems().addAll(jobGoals);
                    if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                        listOfGoals.getItems().add(theSeparator);
                    }
                    listOfGoals.getItems().addAll(postsecGoals);
                    if (postsecGoals.size() != 0 && otherGoals.size() != 1) {
                        listOfGoals.getItems().add(theSeparator);
                    }
                    listOfGoals.getItems().addAll(otherGoals);
                    listOfGoals.getItems().remove("No current goal");

                    AIUTreeIterator<String, Student> updateStudents = new AIUTreeIterator(database.tree1);
                    while (updateStudents.hasNext()) {
                        Student currentStudent = (Student) updateStudents.next().data;
                        if (currentStudent.goal.goal.equals(oldGoalStatement)) {
                            Goal newGoal = currentStudent.goal;
                            newGoal.goal = newGoalStatement;
                            Student updatedStudent = new Student(currentStudent.lastName, currentStudent.firstName,
                                    currentStudent.phoneNumber, currentStudent.emailAddress,
                                    new Goal(newGoal), currentStudent.notes);
                            database.modify1(currentStudent.lastName, updatedStudent);
                        }
                    }
                    // Need to update the goals of students with that goal

                }
            }
        });

        updateOrder.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                Goal currentGoal = goalTree.find((String) listOfGoals.getValue());
                ArrayList<Subgoal> subgoalCopies = new ArrayList<Subgoal>();
                for (Subgoal subgoal : currentGoal.subgoals) {
                    subgoalCopies.add(new Subgoal(subgoal.subgoal));
                }
                int size = textFields.size();
                boolean[] valuesFound = new boolean[size];
                boolean allValuesFound = true;
                for (TextField current : textFields) {
                    if (current.getLength() == 0) {
                        break; //flag error (empty)
                    }
                    if (Integer.parseInt(current.getText()) > size) {
                        break; //flag error (too large)
                    } else {
                        valuesFound[Integer.parseInt(current.getText()) - 1] = true;
                    }
                }
                for (boolean b : valuesFound) {
                    if (!b) {
                        allValuesFound = false;
                        break; //flag error (not all values founds)
                    }
                }
                if (allValuesFound) {
                    for (int i = 0; i < size; i++) {
                        int updatedValue = Integer.parseInt(textFields.get(i).getText());
                        if (i != (updatedValue - 1)) {
                            currentGoal.subgoals.set(updatedValue - 1, subgoalCopies.get(i));
                        }
                    }
                    goalTree.modify((String) listOfGoals.getValue(), new Goal(currentGoal));
                    AIUTreeIterator<String, Student> updateStudents = new AIUTreeIterator(database.tree1);
                    ArrayList<Subgoal> newSubgoals = new ArrayList<Subgoal>();
                    for (int i = 0; i < size; i++) {
                        newSubgoals.add(new Subgoal(""));
                    }
                    while (updateStudents.hasNext()) {
                        Student currentStudent = (Student) updateStudents.next().data;
                        Goal studentGoal = currentStudent.goal;
                        ArrayList<Subgoal> exactSubgoalCopies = new ArrayList<Subgoal>();
                        for (Subgoal subgoal : studentGoal.subgoals) {
                            exactSubgoalCopies.add(subgoal);
                        }
                        if (studentGoal.goal.equals((String) listOfGoals.getValue())) {
                            for (int i = 0; i < size; i++) {
                                int updatedValue2 = Integer.parseInt(textFields.get(i).getText());
                                if (i != (updatedValue2 - 1)) {
                                    //Subgoal tempSubgoal = studentGoal.subgoals.get(i);
                                    newSubgoals.set(updatedValue2 - 1, exactSubgoalCopies.get(i));
                                    //newSubgoals.get(updatedValue2 - 1).setComplete(tempSubgoal.isComplete);
                                } else {
                                    newSubgoals.set(i, studentGoal.subgoals.get(i));
                                }
                            }
                            studentGoal.subgoals = newSubgoals;
                            Student updatedStudent = new Student(currentStudent.lastName, currentStudent.firstName,
                                    currentStudent.phoneNumber, currentStudent.emailAddress,
                                    new Goal(studentGoal), currentStudent.notes);
                            database.modify1(currentStudent.lastName, updatedStudent);
                        }
                    }
                }
                manageGoalsGrid.getChildren().remove(hbDeleteSubgoals);
                manageGoalsGrid.getChildren().remove(hbUpdateOrder);
                manageGoalsGrid.getChildren().remove(addSubgoalLabel);
                manageGoalsGrid.getChildren().remove(newSubgoal);
                manageGoalsGrid.getChildren().remove(hbAddSubgoal);
                manageGoalsGrid.getChildren().remove(hbDeleteGoal);
                newSubgoal.clear();
                int numChildren = manageGoalsGrid.getChildren().size();
                for (int i = 0; i < 2 * checkBoxes2.size(); i++) {
                    manageGoalsGrid.getChildren().remove(numChildren - i - 1);
                }
                checkBoxes2.clear();
                textFields.clear();
                goalStatement.setText((String) listOfGoals.getValue());
                editGoal.setDisable(false);
                Goal currentGoalUpdated = goalTree.find((String) listOfGoals.getValue());
                int m = currentGoalUpdated.subgoals.size();
                for (int i = 0; i < m; i++) {
                    CheckBox currentSubgoal = new CheckBox(currentGoal.subgoals.get(i).subgoal);
                    manageGoalsGrid.add(currentSubgoal, 1, 10 + i, 2, 1);
                    checkBoxes2.add(currentSubgoal);
                    TextField currentTextField = new TextField("" + (i + 1));
                    manageGoalsGrid.add(currentTextField, 3, 10 + i);
                    textFields.add(currentTextField);
                }
                if (m > 0) {
                    manageGoalsGrid.add(hbDeleteSubgoals, 3, 11 + m, 2, 1);
                    manageGoalsGrid.add(hbUpdateOrder, 1, 11 + m, 2, 1);
                }
                manageGoalsGrid.add(addSubgoalLabel, 0, 13 + m);
                manageGoalsGrid.add(newSubgoal, 1, 13 + m, 2, 1);
                manageGoalsGrid.add(hbAddSubgoal, 3, 13 + m, 2, 1);
                manageGoalsGrid.add(hbDeleteGoal, 1, 16 + m, 3, 1);
                findStudentEdit.getSelectionModel().clearSelection();
                findStudentEdit.setValue(null);
                findStudentGoals.getSelectionModel().clearSelection();
                findStudentGoals.setValue(null);
                findStudentReports.getSelectionModel().clearSelection();
                findStudentReports.setValue(null);
            }
        });

        deleteSubgoals.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                Goal currentGoal = goalTree.find((String) listOfGoals.getValue());
                int deleteCount = 0;
                int n = checkBoxes2.size();
                for (int i = 0; i < n; i++) {
                    if (checkBoxes2.get(i).isSelected()) {
                        currentGoal.subgoals.remove(i - deleteCount);
                        deleteCount++;
                    }
                }
                goalTree.modify((String) listOfGoals.getValue(), new Goal(currentGoal));
                AIUTreeIterator<String, Student> updateStudents = new AIUTreeIterator(database.tree1);
                while (updateStudents.hasNext()) {
                    Student currentStudent = (Student) updateStudents.next().data;
                    Goal studentGoal = currentStudent.goal;
                    if (studentGoal.goal.equals((String) listOfGoals.getValue())) {
                        int deleteCount2 = 0;
                        for (int i = 0; i < n; i++) {
                            if (checkBoxes2.get(i).isSelected()) {
                                studentGoal.subgoals.remove(i - deleteCount2);
                                deleteCount2++;
                            }
                        }
                        studentGoal = new Goal(studentGoal);
                        Student updatedStudent = new Student(currentStudent.lastName, currentStudent.firstName,
                                currentStudent.phoneNumber, currentStudent.emailAddress,
                                studentGoal, currentStudent.notes);
                        database.modify1(currentStudent.lastName, updatedStudent);
                    }
                }
                manageGoalsGrid.getChildren().remove(hbDeleteSubgoals);
                manageGoalsGrid.getChildren().remove(hbUpdateOrder);
                manageGoalsGrid.getChildren().remove(addSubgoalLabel);
                manageGoalsGrid.getChildren().remove(newSubgoal);
                manageGoalsGrid.getChildren().remove(hbAddSubgoal);
                manageGoalsGrid.getChildren().remove(hbDeleteGoal);
                int numChildren = manageGoalsGrid.getChildren().size();
                for (int i = 0; i < 2 * n; i++) {
                    manageGoalsGrid.getChildren().remove(numChildren - i - 1);
                }
                checkBoxes2.clear();
                textFields.clear();
                goalStatement.setText((String) listOfGoals.getValue());
                editGoal.setDisable(false);
                Goal currentGoalUpdated = goalTree.find((String) listOfGoals.getValue());
                int m = currentGoalUpdated.subgoals.size();
                for (int i = 0; i < m; i++) {
                    CheckBox currentSubgoal = new CheckBox(currentGoal.subgoals.get(i).subgoal);
                    manageGoalsGrid.add(currentSubgoal, 1, 10 + i, 2, 1);
                    checkBoxes2.add(currentSubgoal);
                    TextField currentTextField = new TextField("" + (i + 1));
                    manageGoalsGrid.add(currentTextField, 3, 10 + i);
                    textFields.add(currentTextField);
                }
                if (m > 0) {
                    manageGoalsGrid.add(hbDeleteSubgoals, 3, 11 + m, 2, 1);
                    manageGoalsGrid.add(hbUpdateOrder, 1, 11 + m, 2, 1);
                }
                manageGoalsGrid.add(addSubgoalLabel, 0, 13 + m);
                manageGoalsGrid.add(newSubgoal, 1, 13 + m, 2, 1);
                manageGoalsGrid.add(hbAddSubgoal, 3, 13 + m, 2, 1);
                manageGoalsGrid.add(hbDeleteGoal, 1, 16 + m, 3, 1);
                findStudentGoals.getSelectionModel().clearSelection();
                findStudentGoals.setValue(null);
                findStudentReports.getSelectionModel().clearSelection();
                findStudentReports.setValue(null);
            }
        });

        deleteSubgoals.setOnMouseReleased(new EventHandler<MouseEvent>() {
            public void handle(MouseEvent m) {
                if (checkBoxes2.size() == 0) {
                    manageGoalsGrid.getChildren().remove(hbDeleteSubgoals);
                    manageGoalsGrid.getChildren().remove(hbUpdateOrder);
                }
            }
        });

        newSubgoal.setOnKeyReleased(new EventHandler<KeyEvent>() {
            public void handle(KeyEvent k) {
                if (newSubgoal.getLength() == 0) {
                    addSubgoal.setDisable(true);
                } else if (newSubgoal.getLength() == 1) {
                    addSubgoal.setDisable(false);
                }
            }
        });

        addSubgoal.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                Goal currentGoal = goalTree.find((String) listOfGoals.getValue());
                currentGoal.subgoals.add(new Subgoal(newSubgoal.getText()));
                goalTree.modify((String) listOfGoals.getValue(), new Goal(currentGoal));
                AIUTreeIterator<String, Student> updateStudents = new AIUTreeIterator(database.tree1);
                while (updateStudents.hasNext()) {
                    Student currentStudent = (Student) updateStudents.next().data;
                    Goal studentGoal = currentStudent.goal;
                    if (studentGoal.goal.equals((String) listOfGoals.getValue())) {
                        studentGoal.subgoals.add(new Subgoal(newSubgoal.getText()));
                        studentGoal = new Goal(studentGoal);
                        Student updatedStudent = new Student(currentStudent.lastName, currentStudent.firstName,
                                currentStudent.phoneNumber, currentStudent.emailAddress,
                                studentGoal, currentStudent.notes);
                        database.modify1(currentStudent.lastName, updatedStudent);
                    }
                }
                manageGoalsGrid.getChildren().remove(hbDeleteSubgoals);
                manageGoalsGrid.getChildren().remove(hbUpdateOrder);
                manageGoalsGrid.getChildren().remove(addSubgoalLabel);
                manageGoalsGrid.getChildren().remove(newSubgoal);
                manageGoalsGrid.getChildren().remove(hbAddSubgoal);
                newSubgoal.clear();
                int numChildren = manageGoalsGrid.getChildren().size();
                for (int i = 0; i < 2 * checkBoxes2.size(); i++) {
                    manageGoalsGrid.getChildren().remove(numChildren - i - 1);
                }
                checkBoxes2.clear();
                textFields.clear();
                goalStatement.setText((String) listOfGoals.getValue());
                editGoal.setDisable(false);
                Goal currentGoalUpdated = goalTree.find((String) listOfGoals.getValue());
                int m = currentGoalUpdated.subgoals.size();
                for (int i = 0; i < m; i++) {
                    CheckBox currentSubgoal = new CheckBox(currentGoal.subgoals.get(i).subgoal);
                    manageGoalsGrid.add(currentSubgoal, 1, 10 + i, 2, 1);
                    checkBoxes2.add(currentSubgoal);
                    TextField currentTextField = new TextField("" + (i + 1));
                    manageGoalsGrid.add(currentTextField, 3, 10 + i);
                    textFields.add(currentTextField);
                }
                manageGoalsGrid.add(hbDeleteSubgoals, 3, 11 + m, 2, 1);
                manageGoalsGrid.add(hbUpdateOrder, 1, 11 + m, 2, 1);
                manageGoalsGrid.add(addSubgoalLabel, 0, 13 + m);
                manageGoalsGrid.add(newSubgoal, 1, 13 + m, 2, 1);
                manageGoalsGrid.add(hbAddSubgoal, 3, 13 + m, 2, 1);
                findStudentGoals.getSelectionModel().clearSelection();
                findStudentGoals.setValue(null);
                findStudentReports.getSelectionModel().clearSelection();
                findStudentReports.setValue(null);
            }
        });

        deleteGoal.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (popup.agreeToChanges) {
                    String goalString = (String) listOfGoals.getValue();
                    GoalType goalType = goalTree.find(goalString).goalType;
                    goalTree.remove(goalString);
                    AIUTreeIterator<String, Student> updateStudents = new AIUTreeIterator(database.tree1);
                    while (updateStudents.hasNext()) {
                        Student currentStudent = (Student) updateStudents.next().data;
                        if (currentStudent.goal.goal.equals(goalString)) {
                            if (currentStudent.secondGoal != null) {
                                currentStudent.goal = currentStudent.secondGoal;
                                currentStudent.secondGoal = null;
                            } else {
                                currentStudent.goal = goalTree.find("No current goal");
                            }
                        }
                        if (currentStudent.secondGoal != null) {
                            if (currentStudent.secondGoal.goal.equals(goalString)) {
                                currentStudent.secondGoal = null;
                            }
                        }
                        database.modify1(currentStudent.lastName, currentStudent);
                    }
                    listOfGoals.getSelectionModel().clearSelection();
                    listOfGoals.setValue(null);
                    goalStatement.clear();
                    if (goalType == GoalType.CIVICS) {
                        civicsGoals.remove(goalString);
                    } else if (goalType == GoalType.JOB) {
                        jobGoals.remove(goalString);
                    } else if (goalType == GoalType.POSTSEC) {
                        postsecGoals.remove(goalString);
                    } else {
                        otherGoals.remove(goalString);
                    }
                    displayGoal.getItems().clear();
                    displayGoal.getItems().addAll(civicsGoals);
                    if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                        displayGoal.getItems().add(theSeparator);
                    }
                    displayGoal.getItems().addAll(jobGoals);
                    if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                        displayGoal.getItems().add(theSeparator);
                    }
                    displayGoal.getItems().addAll(postsecGoals);
                    if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
                        displayGoal.getItems().add(theSeparator);
                    }
                    displayGoal.getItems().addAll(otherGoals);
                    displaySecondGoal.getItems().clear();
                    displaySecondGoal.getItems().addAll(civicsGoals);
                    if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                        displaySecondGoal.getItems().add(theSeparator);
                    }
                    displaySecondGoal.getItems().addAll(jobGoals);
                    if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                        displaySecondGoal.getItems().add(theSeparator);
                    }
                    displaySecondGoal.getItems().addAll(postsecGoals);
                    if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
                        displaySecondGoal.getItems().add(theSeparator);
                    }
                    displaySecondGoal.getItems().addAll(otherGoals);
                    goals2.getItems().clear();
                    goals2.getItems().addAll(civicsGoals);
                    if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                        goals2.getItems().add(theSeparator);
                    }
                    goals2.getItems().addAll(jobGoals);
                    if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                        goals2.getItems().add(theSeparator);
                    }
                    goals2.getItems().addAll(postsecGoals);
                    if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
                        goals2.getItems().add(theSeparator);
                    }
                    goals2.getItems().addAll(otherGoals);
                    secondGoals2.getItems().clear();
                    secondGoals2.getItems().addAll(civicsGoals);
                    if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                        secondGoals2.getItems().add(theSeparator);
                    }
                    secondGoals2.getItems().addAll(jobGoals);
                    if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                        secondGoals2.getItems().add(theSeparator);
                    }
                    secondGoals2.getItems().addAll(postsecGoals);
                    if (postsecGoals.size() != 0 && otherGoals.size() != 0) {
                        secondGoals2.getItems().add(theSeparator);
                    }
                    secondGoals2.getItems().addAll(otherGoals);
                    listOfGoals.getItems().clear();
                    listOfGoals.getItems().addAll(civicsGoals);
                    if (civicsGoals.size() != 0 && jobGoals.size() != 0) {
                        listOfGoals.getItems().add(theSeparator);
                    }
                    listOfGoals.getItems().addAll(jobGoals);
                    if (jobGoals.size() != 0 && postsecGoals.size() != 0) {
                        listOfGoals.getItems().add(theSeparator);
                    }
                    listOfGoals.getItems().addAll(postsecGoals);
                    if (postsecGoals.size() != 0 && otherGoals.size() != 1) {
                        listOfGoals.getItems().add(theSeparator);
                    }
                    listOfGoals.getItems().addAll(otherGoals);
                    listOfGoals.getItems().remove("No current goal");
                    findStudentEdit.getSelectionModel().clearSelection();
                    findStudentEdit.setValue(null);
                    findStudentGoals.getSelectionModel().clearSelection();
                    findStudentGoals.setValue(null);
                    findStudentReports.getSelectionModel().clearSelection();
                    findStudentReports.setValue(null);
                    popup.setAgreeToChanges(false);
                } else {
                    String goalString = (String) listOfGoals.getValue();
                    AIUTreeIterator<String, Student> goalCounter = new AIUTreeIterator(database.tree1);
                    int goalCount = 0;
                    while (goalCounter.hasNext()) {
                        Student currentStudent = (Student) goalCounter.next().data;
                        if ((currentStudent.goal != null && currentStudent.goal.goal.equals(goalString))
                                || (currentStudent.secondGoal != null && currentStudent.secondGoal.goal.equals(goalString))) {
                            goalCount++;
                        }
                    }
                    areYouSure4.setText("Are you sure you want to delete this goal? \n There are "
                            + "currently " + goalCount + " students with this goal");
                    areYouSure4.setVisible(true);
                    areYouSure1.setVisible(false);
                    areYouSure2.setVisible(false);
                    areYouSure3.setVisible(false);
                    areYouSure5.setVisible(false);
                    popup.setDeletingGoal(true);
                    popup.setUpdatingStudent(false);
                    popup.setDeletingStudent(false);
                    popup.setUpdatingUser(false);
                    popup.setDeletingUser(false);
                    popup.setMarkingGoal1Complete(false);
                    popup.setMarkingGoal2Complete(false);
                    popupStage.setScene(popupScene);
                    popupStage.show();
                }
            }
        });

        //Create Tabs
        Tab homeTab = new Tab();
        homeTab.setText("Home");
        homeTab.setContent(homeGrid);
        tabPane.getTabs().add(homeTab);

        homeTab.setOnSelectionChanged(new EventHandler<Event>() {
            public void handle(Event t) {
                studentsWithoutGoals.clear();
                AIUTreeIterator<String, Student> studentGoalChecker = new AIUTreeIterator(database.tree1);
                String goallessStudents = "";
                while (studentGoalChecker.hasNext()) {
                    Student currentStudent = (Student) studentGoalChecker.next().data;
                    if (currentStudent.goal.goal.equals("No current goal")) {
                        goallessStudents += currentStudent.firstName + " " + currentStudent.lastName + "\n";
                    }
                }
                studentsWithoutGoals.setText(goallessStudents);
            }
        });

        Tab editTab = new Tab();
        editTab.setText("Edit Profiles");
        editTab.setContent(editGrid);
        tabPane.getTabs().add(editTab);

        editTab.setOnSelectionChanged(new EventHandler<Event>() {
            public void handle(Event t) {

            }
        });

        Tab goalTab = new Tab();
        goalTab.setText("Student Goals");
        goalTab.setContent(goalsGrid);
        tabPane.getTabs().add(goalTab);

        goalTab.setOnSelectionChanged(new EventHandler<Event>() {
            public void handle(Event t) {

            }
        });

        Tab newStudentTab = new Tab();
        newStudentTab.setText("New Student");
        newStudentTab.setContent(newStudentGrid);
        tabPane.getTabs().add(newStudentTab);

        newStudentTab.setOnSelectionChanged(new EventHandler<Event>() {
            public void handle(Event t) {

            }
        });

        Tab flagsTab = new Tab();
        flagsTab.setText("Flags");
        flagsTab.setContent(flagsGrid);
        tabPane.getTabs().add(flagsTab);

        flagsTab.setOnSelectionChanged(new EventHandler<Event>() {
            public void handle(Event t) {

            }
        });

        Tab reportsTab = new Tab();
        reportsTab.setText("Reports");
        reportsTab.setContent(reportsGrid);
        tabPane.getTabs().add(reportsTab);

        reportsTab.setOnSelectionChanged(new EventHandler<Event>() {
            public void handle(Event t) {

            }
        });

        Tab adminTab = new Tab();
        adminTab.setText("Administration");
        adminTab.setContent(adminGrid);
        if (isAdmin) {
            tabPane.getTabs().add(adminTab);
        }

        adminTab.setOnSelectionChanged(new EventHandler<Event>() {
            public void handle(Event t) {

            }
        });

        Tab manageTab = new Tab();
        manageTab.setText("Manage Goals");
        manageTab.setContent(manageGoalsGrid);
        if (isAdmin) {
            tabPane.getTabs().add(manageTab);
        }

        manageTab.setOnSelectionChanged(new EventHandler<Event>() {
            public void handle(Event t) {

            }
        });

        Text scenetitle2 = new Text();
        if (isAdmin) {
            scenetitle2.setText("Administrator");
        } else {
            scenetitle2.setText("");
        }

        scenetitle2.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        mainPane.setCenter(tabPane);

        mainPane.setTop(scenetitle2);

        mainPane.setAlignment(scenetitle2, Pos.CENTER);

        mainPane.setMargin(scenetitle2, new Insets(10, 10, 10, 10));

        mainPane.prefHeightProperty().bind(scene.heightProperty());
        mainPane.prefWidthProperty().bind(scene.widthProperty());

        root.getChildren().add(mainPane);
        primaryStage.setScene(scene);

        primaryStage.show();

        primaryStage.setOnCloseRequest(new EventHandler<WindowEvent>() {

            public void handle(WindowEvent we) {
                saveTree();
                saveGoalTree();
                saveUserTree();
                saveAdminNotes();
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

}

final class UserAndPass {

    public String username;
    public String password;
    public boolean isAdmin = false;
    public String firstName;
    public String lastName;
    public Date lastLogin;

    public UserAndPass(String theUsername, String thePassword, String theFirstName,
            String theLastName) {
        username = theUsername;
        password = thePassword;
        firstName = theFirstName;
        lastName = theLastName;
    }

    public UserAndPass(String theUsername, String thePassword, String theFirstName,
            String theLastName, long lastLoginTime) {
        username = theUsername;
        password = thePassword;
        firstName = theFirstName;
        lastName = theLastName;
        lastLogin = new Date(lastLoginTime);
    }

    public void changeUsername(String theUsername) {
        this.username = theUsername;
    }

    public void changePassword(String thePassword) {
        this.password = thePassword;
    }

    public void setAdmin(boolean b) {
        this.isAdmin = b;
    }

}

final class PopUpWindow {

    public boolean agreeToChanges = false;
    public boolean isDeletingStudent = false;
    public boolean isUpdatingStudent = false;
    public boolean isUpdatingUser = false;
    public boolean isDeletingUser = false;
    public boolean isMarkingGoal1Complete = false;
    public boolean isMarkingGoal2Complete = false;
    public boolean isDeletingGoal = false;

    public void setAgreeToChanges(boolean b) {
        this.agreeToChanges = b;
    }

    public void setDeletingStudent(boolean b) {
        this.isDeletingStudent = b;
    }

    public void setUpdatingStudent(boolean b) {
        this.isUpdatingStudent = b;
    }

    public void setMarkingGoal1Complete(boolean b) {
        this.isMarkingGoal1Complete = b;
    }

    public void setMarkingGoal2Complete(boolean b) {
        this.isMarkingGoal2Complete = b;
    }

    public void setUpdatingUser(boolean b) {
        this.isUpdatingUser = b;
    }

    public void setDeletingUser(boolean b) {
        this.isDeletingUser = b;
    }

    public void setDeletingGoal(boolean b) {
        this.isDeletingGoal = b;
    }
}

final class Node<K extends Comparable, D> {

    public K key;
    public D data;
    public Node<K, D> left, right;

    public Node(K k, D d, Node<K, D> l, Node<K, D> r) {
        key = k;
        data = d;
        left = l;
        right = r;
    }

    public Node(K k, D d) {
        this(k, d, null, null);
    }

    public String toString() {
        return (String) key;
    }
}

final class Pair<E1, E2> {

    public E1 first;
    public E2 second;

    public Pair(E1 f, E2 s) {
        first = f;
        second = s;
    }
}

final class AIUTree<K extends Comparable, D> {

    protected Node<K, D> root = null;

    public int height() {
        return height(root);
    }

    private int height(Node<K, D> root) {
        return root == null ? 0 : 1 + Math.max(height(root.left), height(root.right));
    }

    public int size() {
        return size(root);
    }

    private int size(Node<K, D> root) {
        return root == null ? 0 : 1 + size(root.left) + size(root.right);
    }

    public D find(K key) {
        return find(key, root);
    }

    private D find(K key, Node<K, D> root) {
        if (root == null) {
            return null;
        }
        int c = key.compareTo(root.key);
        if (c == 0) {
            return root.data;
        } else if (c < 0) {
            return find(key, root.left);
        } else // c > 0
        {
            return find(key, root.right);
        }
    }

    public void add(K key, D data) {
        root = add(key, data, root);
    }

    private Node<K, D> add(K key, D data, Node<K, D> root) {
        // returns the tree with the added record.
        if (root == null) {
            return new Node<K, D>(key, data);
        }
        int c = key.compareTo(root.key);

        //if(c == 0) {
        //   System.err.println("Error: duplicate key: " + key);
        // System.exit(1);
        //return null;
        //}
        if (c <= 0) {
            root.left = add(key, data, root.left);
            return root;
        } else { // c > 0
            root.right = add(key, data, root.right);
            return root;
        }
    }

    public void modify(K key, D data) {
        modify(key, data, root);
    }

    private void modify(K key, D data, Node<K, D> root) {
        if (root == null) {
            System.err.println("Error: key not found: " + key);
            System.exit(1);
        }
        int c = key.compareTo(root.key);
        if (c == 0) {
            root.data = data;
        } else if (c < 0) {
            modify(key, data, root.left);
        } else // c > 0
        {
            modify(key, data, root.right);
        }
    }

    @Override
    public String toString() {
        return toString(root);
    }

    private String toString(Node<K, D> root) {
        if (root == null) {
            return "";
        }
        return toString(root.left) + "(" + root.key + "," + root.data + ")" + toString(root.right);
    }

    public Node<K, D> leftmost(Node<K, D> root) {
        // Assume root is not null.
        if (root.left == null) {
            return root;
        } else {
            return leftmost(root.left);
        }
    }

    private Pair<Node<K, D>, Node<K, D>> findAndRemoveLeftmost(Node<K, D> root) {
        // Assume root is not null.
        // Returns the leftmost node and the tree with that node deleted.
        if (root.left == null) {
            return new Pair<Node<K, D>, Node<K, D>>(root, root.right);
        } else {
            Pair<Node<K, D>, Node<K, D>> pair = findAndRemoveLeftmost(root.left);
            Node<K, D> leftmost = pair.first;
            Node<K, D> newTree = pair.second;
            root.left = newTree;
            return new Pair<Node<K, D>, Node<K, D>>(leftmost, root);
        }
    }

    public void remove(K key) {
        root = remove(key, root);
    }

    private Node<K, D> remove(K key, Node<K, D> root) {
        if (root == null) {
            System.err.println("Error: key not found: " + key);
            System.exit(1);
            return null;
        }
        int c = key.compareTo(root.key);
        if (c == 0) {
            if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            } else { // two children, replace with leftmost node of right subtree.
                Pair<Node<K, D>, Node<K, D>> pair = findAndRemoveLeftmost(root.right);
                Node<K, D> leftmost = pair.first;
                Node<K, D> newRight = pair.second;
                leftmost.left = root.left;
                leftmost.right = newRight;
                return leftmost;
            }
        } else if (c < 0) {
            root.left = remove(key, root.left);
            return root;
        } else { // c > 0
            root.right = remove(key, root.right);
            return root;
        }
    }
}

final class TwoKeyTree<K1 extends Comparable, K2 extends Comparable, D> {

    public AIUTree<K1, D> tree1 = new AIUTree<>();
    public AIUTree<K2, D> tree2 = new AIUTree<>();
    public AIUTree<K1, K2> tree3 = new AIUTree<>();    //tree3 and tree4 are used to link the two keys
    public AIUTree<K2, K1> tree4 = new AIUTree<>();

    public void add(K1 key1, K2 key2, D data) {
        tree1.add(key1, data);
        tree2.add(key2, data);
        tree3.add(key1, key2);
        tree4.add(key2, key1);
    }

    public D find1(K1 key1) {
        return tree1.find(key1);
    }

    public D find2(K2 key2) {
        return tree2.find(key2);
    }

    public void modify1(K1 key1, D data) {
        K2 key2 = tree3.find(key1);
        tree1.modify(key1, data);
        tree2.modify(key2, data);
    }

    public void modify2(K2 key2, D data) {
        K1 key1 = tree4.find(key2);
        tree1.modify(key1, data);
        tree2.modify(key2, data);
    }

    public void change1(K1 key1, K2 key2) {
        tree2.remove(tree3.find(key1));   //remove the old key2 from tree2
        tree2.add(key2, tree1.find(key1)); //add the new key2 to tree2 linked to the data at key1
        tree4.remove(tree3.find(key1));   //remove the old key2 from tree4
        tree3.modify(key1, key2);          //modify key1 to point to the new key2 in tree3
        tree4.add(key2, key1);             //add a link from the new key2 to key1 in tree4
    }

    public void change2(K2 key2, K1 key1) {
        tree1.remove(tree4.find(key2));    //remove the old key1 from tree1
        tree1.add(key1, tree2.find(key2));  //add the new key1 to tree1 linked to the data at key2
        tree3.remove(tree4.find(key2));    //remove the old key1 from tree3
        tree4.modify(key2, key1);           //modify key2 to point to the new key1 in tree4
        tree3.add(key1, key2);              //add a link from the new key1 to key2 in tree3
    }

    public void remove1(K1 key1) {
        K2 key2 = tree3.find(key1);
        tree1.remove(key1);
        tree2.remove(key2);
        tree3.remove(key1);
        tree4.remove(key2);
    }

    public void remove2(K2 key2) {
        K1 key1 = tree4.find(key2);
        tree1.remove(key1);
        tree2.remove(key2);
        tree3.remove(key1);
        tree4.remove(key2);
    }

    public String list1() {
        return tree1.toString();
    }

    public String list2() {
        return tree2.toString();
    }
}

final class AIUTreeIterator<K extends Comparable, D> {

    Stack<Pair<Node<K, D>, Boolean>> stack = new Stack<Pair<Node<K, D>, Boolean>>();

    private boolean flag = false;
    private Node<K, D> node = null;

    public AIUTreeIterator(AIUTree tree) {
        node = tree.root;
        Pair<Node<K, D>, Boolean> pair = new Pair<Node<K, D>, Boolean>(node, true);
        stack.push(pair);
    }

    public boolean hasNext() {
        return !stack.empty();
    }

    public Node<K, D> next() {
        Pair<Node<K, D>, Boolean> pair = stack.pop();
        if (pair.second == true) {
            pair.second = false;
            stack.push(pair);
            if (pair.first.left != null) {
                Pair<Node<K, D>, Boolean> pair2 = new Pair<Node<K, D>, Boolean>(pair.first.left, true);
                stack.push(pair2);
            }
            return this.next();
        } else if (pair.second == false && pair.first.right != null) {
            Pair<Node<K, D>, Boolean> pair3 = new Pair<Node<K, D>, Boolean>(pair.first.right, true);
            stack.push(pair3);
            return pair.first;
        } else {
            return pair.first;
        }
    }
}

public class AIUWithTrees extends Application {

    @Override
    public void start(final Stage primaryStage) {
        primaryStage.setTitle("Welcome to AIU");
        primaryStage.setResizable(false);

        GridPane grid = new GridPane();
        grid.setAlignment(Pos.CENTER);
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(25, 25, 25, 25));
        grid.getColumnConstraints().add(new ColumnConstraints(75));

        /*
         final ArrayList<UserAndPass> users = new ArrayList<UserAndPass>();
         UserAndPass user1 = new UserAndPass("admin", "password");
         UserAndPass user2 = new UserAndPass("mguyer", "test1234");
         user1.setAdmin(true);
         users.add(user1);
         users.add(user2);
         */
        Text scenetitle = new Text("Welcome");
        //scenetitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        scenetitle.setId("welcome-text");
        grid.add(scenetitle, 0, 0, 2, 1);

        Label userName = new Label("User Name:");
        grid.add(userName, 0, 1);

        final TextField userTextField = new TextField();
        grid.add(userTextField, 1, 1);

        Label pw = new Label("Password:");
        grid.add(pw, 0, 2);

        final PasswordField pwBox = new PasswordField();
        grid.add(pwBox, 1, 2);

        Button btn = new Button("Sign in ");
        HBox hbBtn = new HBox(10);
        hbBtn.setAlignment(Pos.BOTTOM_RIGHT);
        hbBtn.getChildren().add(btn);
        grid.add(hbBtn, 1, 4);

        final Text loginIssue = new Text();
        grid.add(loginIssue, 0, 6, 2, 1);

        btn.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent e) {
                if (userTextField.getLength() == 0 && pwBox.getLength() == 0) {
                    loginIssue.setFill(Color.FIREBRICK);
                    loginIssue.setText("Please enter a username and password");
                } else if (userTextField.getLength() == 0) {
                    loginIssue.setFill(Color.FIREBRICK);
                    loginIssue.setText("Please enter a username");
                } else if (pwBox.getLength() == 0) {
                    loginIssue.setFill(Color.FIREBRICK);
                    loginIssue.setText("Please enter a password");
                } else {
                    boolean userFound = false;
                    AIUTreeIterator users = new AIUTreeIterator(userTree);
                    while (users.hasNext()) {
                        UserAndPass user = (UserAndPass) users.next().data;
                        if (userTextField.getText().equals(user.username)
                                && pwBox.getText().equals(user.password)) {
                            userFound = true;
                            TabDemo tabDisplay = new TabDemo(database, goalTree,
                                    userTree, user, adminNotes);
                            Stage tabStage = new Stage();
                            if (user.isAdmin) {
                                tabDisplay.setAdmin(true);
                            }
                            //tabDisplay.users = users;
                            tabDisplay.start(tabStage);
                            primaryStage.close();
                            loginIssue.setText("");
                            break;
                        }
                    }
                    if (!userFound) {
                        loginIssue.setFill(Color.FIREBRICK);
                        loginIssue.setText("Invalid username and/or password");
                    }
                }

            }
        });

        Scene scene = new Scene(grid, 300, 275);
        primaryStage.setScene(scene);
        scene.getStylesheets().add(AIUWithTrees.class.getResource("AIULogin.css").toExternalForm());
        primaryStage.show();
    }

    public static TwoKeyTree<String, String, Student> database = new TwoKeyTree<String, String, Student>();

    public static AIUTree<String, Goal> goalTree = new AIUTree<String, Goal>();

    public static AIUTree<String, UserAndPass> userTree = new AIUTree<String, UserAndPass>();

    public static String adminNotes = "";

    public static void plantTree() {
        Scanner fileIn = null;
        try {
            fileIn = new Scanner(new FileInputStream("C:\\Users\\" + System.getProperty("user.name") + "\\Google Drive\\database.txt"));
        } catch (FileNotFoundException e) {
            System.out.println("A fatal error has occurred.");
            System.exit(0);
        }
        while (fileIn.hasNextLine()) {
            String[] array = fileIn.nextLine().split(",");
            Long noteDate = new Long(array[11]);
            Long lastUpdate = new Long(array[6]);
            Goal primaryGoal = goalTree.find(array[7]);
            Goal secondaryGoal;
            Student student = new Student(array[2], array[3], array[4], array[5], lastUpdate, new Goal(primaryGoal), new Notes(array[10].replaceAll("\\\\n", "\n"), noteDate));
            if (!array[8].equals(" ")) {
                secondaryGoal = goalTree.find(array[8]);
                student.setSecondGoal(new Goal(secondaryGoal));
            }
            student.goalsCompleted = Integer.parseInt(array[9]);
            for (int i = 12; i < 32; i++) {
                if (array[i].equals("1")) {
                    student.goal.subgoals.get(i - 12).setComplete(true);
                } else if (array[i].equals("0")) {
                    student.goal.subgoals.get(i - 12).setComplete(false);
                } else {
                    break;
                }
            }
            if (student.secondGoal != null) {
                for (int i = 32; i < array.length; i++) {
                    if (array[i].equals("1")) {
                        student.secondGoal.subgoals.get(i - 32).setComplete(true);
                    } else if (array[i].equals("0")) {
                        student.secondGoal.subgoals.get(i - 32).setComplete(false);
                    } else {
                        break;
                    }
                }
            }
            database.add(array[0], array[1].replaceAll("\\D+", ""), student);
        }
    }

    public static void plantGoalTree() {
        Scanner fileIn2 = null;
        try {
            fileIn2 = new Scanner(new FileInputStream("C:\\Users\\" + System.getProperty("user.name") + "\\Google Drive\\goals.txt"));
        } catch (FileNotFoundException e) {
            System.out.println("A fatal error has occurred.");
            System.exit(0);
        }
        while (fileIn2.hasNextLine()) {
            String[] array = fileIn2.nextLine().split(",");
            Goal currGoal = new Goal(array[0]);
            String goalTypeString = array[1];
            if (goalTypeString.equals("civics")) {
                currGoal.goalType = GoalType.CIVICS;
            } else if (goalTypeString.equals("job")) {
                currGoal.goalType = GoalType.JOB;
            } else if (goalTypeString.equals("postsec")) {
                currGoal.goalType = GoalType.POSTSEC;
            } else {
                currGoal.goalType = GoalType.OTHER;
            }
            for (int i = 2; i < 22; i++) {
                if (!array[i].equals(" ")) {
                    currGoal.addSubgoal(new Subgoal(array[i]));
                } else {
                    break;
                }
            }
            goalTree.add(currGoal.goal, currGoal);
        }
    }

    public static void plantUserTree() {
        Scanner fileIn3 = null;
        try {
            fileIn3 = new Scanner(new FileInputStream("C:\\Users\\" + System.getProperty("user.name") + "\\Google Drive\\users.txt"));
        } catch (FileNotFoundException e) {
            System.out.println("A fatal error has occurred.");
            System.exit(0);
        }
        while (fileIn3.hasNextLine()) {
            String[] array = fileIn3.nextLine().split(",");
            UserAndPass user;
            if (!array[5].equals(" ")) {
                Long lastLoginTime = new Long(array[5]);
                user = new UserAndPass(array[0], array[1], array[3], array[4], lastLoginTime);
            } else {
                user = new UserAndPass(array[0], array[1], array[3], array[4]);
            }
            if (array[2].equals("1")) {
                user.setAdmin(true);
            }
            userTree.add(array[0], user);
        }
    }

    public static void plantAdminNotes() {
        Scanner fileIn4 = null;
        try {
            fileIn4 = new Scanner(new FileInputStream("C:\\Users\\" + System.getProperty("user.name") + "\\Google Drive\\adminNotes.txt"));
        } catch (FileNotFoundException e) {
            System.out.println("A fatal error has occurred.");
            System.exit(0);
        }
        while (fileIn4.hasNextLine()) {
            String currentLine = fileIn4.nextLine();
            if (currentLine.replaceAll(" ", "").length() != 0) {
                adminNotes += currentLine + "\n";
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        plantGoalTree();
        plantTree();
        plantUserTree();
        plantAdminNotes();
        launch(args);
    }

}
