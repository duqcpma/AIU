/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aiulogin;

import java.util.ArrayList;
import java.util.Arrays;
import javafx.application.Application;
import static javafx.application.Application.launch;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.Separator;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import static javafx.scene.control.TabPane.TabClosingPolicy.UNAVAILABLE;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;

/**
 *
 * @author mguyer92
 */
final class Goal {

    public String goal;
    public ArrayList<Subgoal> subgoals = new ArrayList<Subgoal>();

    public Goal(String theGoal) {
        goal = theGoal;
    }

    public Goal(Goal theGoal) {
        goal = theGoal.goal;
        ArrayList<Subgoal> subgoalsCopy = new ArrayList<Subgoal>();
        for (Subgoal subgoal : theGoal.subgoals) {
            Subgoal subgoalCopy = new Subgoal(subgoal.subgoal);
            subgoalCopy.setComplete(subgoal.isComplete);
            subgoalsCopy.add(subgoalCopy);
        }
        subgoals = subgoalsCopy;
    }

    public int numCompletedSubgoals() {
        int count = 0;
        for (Subgoal subgoal : this.subgoals) {
            if (subgoal.isComplete) {
                count++;
            }
        }
        return count;
    }

    public void addSubgoal(Subgoal subgoal) {
        subgoals.add(subgoal);
    }

    public void removeSubgoal(Subgoal subgoal) {
        subgoals.remove(subgoal);
    }
}

final class Subgoal {

    public String subgoal;
    public boolean isComplete;

    public Subgoal(String theSubgoal) {
        subgoal = theSubgoal;
        isComplete = false;
    }

    public void setComplete(boolean b) {
        isComplete = b;
    }
}

final class Student {

    public String lastName;
    public String firstName;
    public String phoneNumber;
    public String emailAddress;
    public int count = 0;
    public int hoursSince = 0;
    public String notes;
    public int goalsCompleted = 0;

    public Goal goal;
    public ArrayList<Goal> completedGoals;

    public Student(String theLastName, String theFirstName, String thePhoneNumber, String theEmail,
            Goal theGoal, String theNotes) {
        lastName = theLastName;
        firstName = theFirstName;
        phoneNumber = thePhoneNumber;
        emailAddress = theEmail;
        count++;
        goal = theGoal;
        notes = theNotes;
    }

    public String getLastName() {
        return this.lastName;
    }

    public String getFirstName() {
        return this.firstName;
    }

    public String getFullName() {
        return (this.lastName + ", " + this.firstName);
    }

    public String getPhoneNumber() {
        return this.phoneNumber;
    }

    public String getEmail() {
        return this.emailAddress;
    }

    public String getNotes() {
        return this.notes;
    }

}

final class TabDemo extends Application {

    public ArrayList<UserAndPass> users = new ArrayList<UserAndPass>();

    public boolean isAdmin = false;

    public void setAdmin(boolean b) {
        this.isAdmin = b;
    }

    @Override
    public void start(final Stage primaryStage) {
        primaryStage.setTitle("Tab Demo");
        primaryStage.setResizable(false);
        final Group root = new Group();
        final Scene scene = new Scene(root, 450, 525, Color.WHITE);

        TabPane tabPane = new TabPane();
        BorderPane mainPane = new BorderPane();

        tabPane.setTabClosingPolicy(UNAVAILABLE);

        // "Edit Profiles" tab contents
        GridPane editGrid = new GridPane();
        editGrid.setAlignment(Pos.TOP_LEFT);
        editGrid.setHgap(10);
        editGrid.setVgap(10);
        editGrid.setPadding(new Insets(25, 25, 25, 25));
        editGrid.getColumnConstraints().add(new ColumnConstraints(150));
        editGrid.getColumnConstraints().add(new ColumnConstraints(20));
        editGrid.getColumnConstraints().add(new ColumnConstraints(80));
        editGrid.getColumnConstraints().add(new ColumnConstraints(70));
        //editGrid.getColumnConstraints().add(new ColumnConstraints(150));

        Label selectStudent = new Label("Select student:");
        editGrid.add(selectStudent, 0, 0);

        final ArrayList<Student> students = new ArrayList<Student>();

        final Goal createEmail = new Goal("Create an email address");
        Subgoal emailSubgoal1 = new Subgoal("Go to gmail");
        Subgoal emailSubgoal2 = new Subgoal("Choose a unique user ID");
        createEmail.addSubgoal(emailSubgoal1);
        createEmail.addSubgoal(emailSubgoal2);

        final Goal driversLicense = new Goal("Acquire a driver's license");
        Subgoal licenseSubgoal1 = new Subgoal("Obtain a Learner's permit");
        Subgoal licenseSubgoal2 = new Subgoal("Practice driving");
        Subgoal licenseSubgoal3 = new Subgoal("Learn to parallel park");
        Subgoal licenseSubgoal4 = new Subgoal("Schedule a driving test");
        Subgoal licenseSubgoal5 = new Subgoal("Pass the driving test");
        driversLicense.addSubgoal(licenseSubgoal1);
        driversLicense.addSubgoal(licenseSubgoal2);
        driversLicense.addSubgoal(licenseSubgoal3);
        driversLicense.addSubgoal(licenseSubgoal4);
        driversLicense.addSubgoal(licenseSubgoal5);

        Student adamBaumgardner = new Student("Baumgardner", "Adam", "(412) 580-8826",
                "baumgardnera@duq.edu", new Goal(createEmail), "");
        Student richBoyles = new Student("Boyles", "Rich", "(724) 550-3375",
                "boylesr@duq.edu", new Goal(createEmail), "");
        Student mikeGuyer = new Student("Guyer", "Mike", "(570) 807-0899",
                "guyerm@duq.edu", new Goal(driversLicense), "");
        students.add(adamBaumgardner);
        students.add(richBoyles);
        students.add(mikeGuyer);

        final ArrayList<String> names = new ArrayList<String>();

        for (Student student : students) {
            names.add(student.lastName + ", " + student.firstName);
        }

        Object[] namesArray = names.toArray();
        Arrays.sort(namesArray);

        /*
         ArrayList<String> civicsGoalList = new ArrayList<String>();
         civicsGoalList.add("Pass the US citizenship test");
         civicsGoalList.add("Register to vote");
         civicsGoalList.add("Vote for the first time");
         civicsGoalList.add("Increase involvement in the community");
         civicsGoalList.add("Gain volunteering experience to increase job skills");
         civicsGoalList.add("Learn to use maps");
         civicsGoalList.add("Learn how to communicate basic personal information");
         civicsGoalList.add("Understand basic working rights");
        
         ArrayList<String> jobsGoalList = new ArrayList<String>();
         jobsGoalList.add("Create an email address");
         jobsGoalList.add("Acquire a driver's license");
        
         ArrayList<String> postSecondaryGoalList = new ArrayList<String>();
         postSecondaryGoalList.add("Transfer credits to school");
         postSecondaryGoalList.add("Get high school transcript");
         postSecondaryGoalList.add("Meet with academic advisor");
         postSecondaryGoalList.add("Take TOEFL");
         postSecondaryGoalList.add("Take GRE");
         postSecondaryGoalList.add("Fill out school application");
         postSecondaryGoalList.add("Apply for financial aid");
         */
        final ComboBox findStudentEdit = new ComboBox();
        findStudentEdit.setItems(FXCollections.observableArrayList(namesArray));
        findStudentEdit.setVisibleRowCount(3);
        editGrid.add(findStudentEdit, 2, 0, 2, 1);

        final TextField firstNameField = new TextField();
        firstNameField.setPromptText("First Name");
        firstNameField.setEditable(false);
        editGrid.add(firstNameField, 0, 2, 1, 1);

        final TextField lastNameField = new TextField();
        lastNameField.setPromptText("Last Name");
        lastNameField.setEditable(false);
        editGrid.add(lastNameField, 0, 3, 1, 1);

        final TextField emailField = new TextField();
        emailField.setPromptText("Email Address");
        emailField.setEditable(false);
        editGrid.add(emailField, 0, 4, 1, 1);

        final TextField phoneNumberField = new TextField();
        phoneNumberField.setPromptText("Phone Number");
        phoneNumberField.setEditable(false);
        editGrid.add(phoneNumberField, 0, 5, 1, 1);

        final Label currentGoal = new Label("Current Goal: ");
        currentGoal.setAlignment(Pos.CENTER_RIGHT);
        editGrid.add(currentGoal, 2, 2);

        final TextField displayGoal = new TextField();
        displayGoal.setEditable(false);
        editGrid.add(displayGoal, 2, 3, 2, 1);

        Label newGoal = new Label("Set a different goal: ");
        editGrid.add(newGoal, 2, 4, 2, 1);

        final ComboBox goals = new ComboBox();
        goals.setItems(FXCollections.observableArrayList("Pass the US citizenship test",
                "Register to vote", "Vote for the first time", "Increase involvement in the community",
                "Gain volunteering experience to increase job skills", "Learn to use maps",
                "Learn to communicate basic personal information", "Understand basic working rights",
                new Separator(), "Create an email address", "Acquire a driver's license", new Separator(),
                "Transfer credits to school", "Get high school transcript", "Meet with academic advisor",
                "Take TOEFL", "Take GRE", "Fill out school application", "Apply for financial aid"));
        goals.setDisable(true);
        editGrid.add(goals, 2, 5, 2, 1);

        Label notes = new Label("Notes:");
        editGrid.add(notes, 0, 8);

        final TextArea noteArea = new TextArea();
        noteArea.setPrefRowCount(5);
        noteArea.setEditable(false);
        editGrid.add(noteArea, 0, 9, 3, 5);

        final Button saveChanges = new Button("Save Changes");
        HBox hbSaveChanges = new HBox(10);
        hbSaveChanges.setAlignment(Pos.BOTTOM_RIGHT);
        hbSaveChanges.getChildren().add(saveChanges);
        saveChanges.setDisable(true);
        editGrid.add(hbSaveChanges, 2, 17, 2, 1);

        final Button deleteStudent = new Button("Delete Student");
        final HBox hbDeleteStudent = new HBox(10);
        hbDeleteStudent.setAlignment(Pos.BOTTOM_LEFT);
        hbDeleteStudent.getChildren().add(deleteStudent);
        deleteStudent.setDisable(true);
        editGrid.add(hbDeleteStudent, 0, 17);

        final Text incompleteInput = new Text();
        editGrid.add(incompleteInput, 2, 19);

        // "Student Goals" tab contents
        final GridPane goalsGrid = new GridPane();
        goalsGrid.setAlignment(Pos.TOP_LEFT);
        goalsGrid.setHgap(10);
        goalsGrid.setVgap(10);
        goalsGrid.setPadding(new Insets(25, 25, 25, 25));
        goalsGrid.getColumnConstraints().add(new ColumnConstraints(120));
        goalsGrid.getColumnConstraints().add(new ColumnConstraints(150));

        Label studentLookUp = new Label("Select student:");
        goalsGrid.add(studentLookUp, 0, 2);

        final ComboBox findStudentGoals = new ComboBox();
        findStudentGoals.setItems(FXCollections.observableArrayList(namesArray));
        findStudentGoals.setVisibleRowCount(3);
        goalsGrid.add(findStudentGoals, 1, 2);

        Label currentGoal2 = new Label("Current goal:");
        goalsGrid.add(currentGoal2, 0, 3);

        final TextField currentStudentGoal = new TextField();
        currentStudentGoal.setEditable(false);
        goalsGrid.add(currentStudentGoal, 1, 3);

        Label subgoals = new Label("Sub-goals:");
        goalsGrid.add(subgoals, 0, 4);

        Button saveGoalChanges = new Button("Save Changes");
        final HBox hbSaveGoalChanges = new HBox(10);
        hbSaveGoalChanges.setAlignment(Pos.BOTTOM_RIGHT);
        hbSaveGoalChanges.getChildren().add(saveGoalChanges);

        // "New Student" tab contents
        GridPane newStudentGrid = new GridPane();
        newStudentGrid.setAlignment(Pos.TOP_LEFT);
        newStudentGrid.setHgap(10);
        newStudentGrid.setVgap(10);
        newStudentGrid.setPadding(new Insets(25, 25, 25, 25));
        newStudentGrid.getColumnConstraints().add(new ColumnConstraints(150));
        newStudentGrid.getColumnConstraints().add(new ColumnConstraints(20));
        newStudentGrid.getColumnConstraints().add(new ColumnConstraints(150));

        final TextField firstNameField2 = new TextField();
        firstNameField2.setPromptText("First Name");
        newStudentGrid.add(firstNameField2, 0, 2, 1, 1);

        final TextField lastNameField2 = new TextField();
        lastNameField2.setPromptText("Last Name");
        newStudentGrid.add(lastNameField2, 0, 3, 1, 1);

        final TextField emailField2 = new TextField();
        emailField2.setPromptText("Email Address");
        newStudentGrid.add(emailField2, 0, 4, 1, 1);

        final TextField phoneNumberField2 = new TextField();
        phoneNumberField2.setPromptText("Phone Number");
        newStudentGrid.add(phoneNumberField2, 0, 5, 1, 1);

        Label goalSelection = new Label("Select a goal:");
        newStudentGrid.add(goalSelection, 2, 2);

        final ComboBox goals2 = new ComboBox();
        goals2.setItems(FXCollections.observableArrayList("Pass the US citizenship test",
                "Register to vote", "Vote for the first time", "Increase involvement in the community",
                "Gain volunteering experience to increase job skills", "Learn to use maps",
                "Learn to communicate basic personal information", "Understand basic working rights",
                new Separator(), "Create an email address", "Acquire a driver's license", new Separator(),
                "Transfer credits to school", "Get high school transcript", "Meet with academic advisor",
                "Take TOEFL", "Take GRE", "Fill out school application", "Apply for financial aid"));
        newStudentGrid.add(goals2, 2, 3);

        Label notes2 = new Label("Notes:");
        newStudentGrid.add(notes2, 0, 8);

        final TextArea noteArea2 = new TextArea();
        noteArea2.setPrefRowCount(5);
        newStudentGrid.add(noteArea2, 0, 9, 3, 5);

        Button addStudent = new Button("Add Student");
        HBox hbAddStudent = new HBox(10);
        hbAddStudent.setAlignment(Pos.BOTTOM_RIGHT);
        hbAddStudent.getChildren().add(addStudent);
        newStudentGrid.add(hbAddStudent, 2, 17);

        final Text studentAdded = new Text();
        newStudentGrid.add(studentAdded, 2, 19);

        // "Flags" tab contents
        GridPane flagsGrid = new GridPane();
        flagsGrid.setAlignment(Pos.TOP_LEFT);
        flagsGrid.setHgap(10);
        flagsGrid.setVgap(10);
        flagsGrid.setPadding(new Insets(25, 25, 25, 25));
        flagsGrid.getColumnConstraints().add(new ColumnConstraints(200));

        Label unreportedStudents = new Label("Students who have not reported in:");
        flagsGrid.add(unreportedStudents, 0, 8, 1, 1);

        final ComboBox reportTimes = new ComboBox();
        reportTimes.setItems(FXCollections.observableArrayList("12 Hours", "30 Hours",
                "60 Hours"));
        flagsGrid.add(reportTimes, 1, 8);

        TextArea studentList = new TextArea();
        studentList.setPrefRowCount(6);
        studentList.setEditable(false);
        flagsGrid.add(studentList, 0, 9, 2, 6);

        final Button printBtn = new Button("Print");
        HBox hbPrint = new HBox(10);
        hbPrint.setAlignment(Pos.BOTTOM_RIGHT);
        hbPrint.getChildren().add(printBtn);
        printBtn.setDisable(true);
        flagsGrid.add(hbPrint, 1, 17);

        // "Reports" tab contents
        GridPane reportsGrid = new GridPane();
        reportsGrid.setAlignment(Pos.TOP_LEFT);
        reportsGrid.setHgap(10);
        reportsGrid.setVgap(10);
        reportsGrid.setPadding(new Insets(25, 20, 25, 20));
        reportsGrid.getColumnConstraints().add(new ColumnConstraints(100));
        reportsGrid.getColumnConstraints().add(new ColumnConstraints(50));
        reportsGrid.getColumnConstraints().add(new ColumnConstraints(45));
        reportsGrid.getColumnConstraints().add(new ColumnConstraints(40));

        Label selectStudent2 = new Label("Select student:");
        reportsGrid.add(selectStudent2, 0, 1);

        final ComboBox findStudentReports = new ComboBox();
        findStudentReports.setItems(FXCollections.observableArrayList(namesArray));
        findStudentReports.setVisibleRowCount(3);
        reportsGrid.add(findStudentReports, 1, 1, 3, 1);

        Label completedGoals = new Label("Completed goals:");
        reportsGrid.add(completedGoals, 3, 9, 3, 1);

        final TextArea completedGoalsList = new TextArea();
        completedGoalsList.setEditable(false);
        reportsGrid.add(completedGoalsList, 3, 10, 3, 7);

        Label completedSubgoals = new Label("Completed subgoals:");
        reportsGrid.add(completedSubgoals, 0, 9, 2, 1);

        final TextArea completedSubgoalsList = new TextArea();
        completedSubgoalsList.setEditable(false);
        reportsGrid.add(completedSubgoalsList, 0, 10, 2, 3);

        Label remainingSubgoals = new Label("Remaining subgoals:");
        reportsGrid.add(remainingSubgoals, 0, 13, 2, 1);

        final TextArea remainingSubgoalsList = new TextArea();
        remainingSubgoalsList.setEditable(false);
        reportsGrid.add(remainingSubgoalsList, 0, 14, 2, 3);

        final Button printReport = new Button("Print Individual Report");
        HBox hbPrintReport = new HBox(10);
        hbPrintReport.setAlignment(Pos.BOTTOM_RIGHT);
        hbPrintReport.getChildren().add(printReport);
        printReport.setDisable(true);
        reportsGrid.add(hbPrintReport, 0, 18, 2, 1);

        Label studentLabel = new Label("Student name:");
        reportsGrid.add(studentLabel, 0, 3);

        final TextField studentName = new TextField();
        studentName.setPromptText("Student Name");
        studentName.setEditable(false);
        reportsGrid.add(studentName, 1, 3, 3, 1);

        Label goalLabel = new Label("Current goal:");
        reportsGrid.add(goalLabel, 0, 4);

        final TextField studentGoal = new TextField();
        studentGoal.setPromptText("Current Student Goal");
        studentGoal.setEditable(false);
        reportsGrid.add(studentGoal, 1, 4, 3, 1);

        final Label goalsCompleted = new Label();
        goalsCompleted.setVisible(false);
        reportsGrid.add(goalsCompleted, 1, 6, 3, 1);

        final Label progressLabel = new Label();
        progressLabel.setVisible(false);
        reportsGrid.add(progressLabel, 1, 7, 4, 1);

        final ProgressBar goalProgress = new ProgressBar();
        goalProgress.setVisible(false);
        reportsGrid.add(goalProgress, 1, 8, 3, 1);

        Button printReportAll = new Button("Create Summary Report");
        HBox hbPrintReportAll = new HBox(10);
        hbPrintReportAll.setAlignment(Pos.BOTTOM_RIGHT);
        hbPrintReportAll.getChildren().add(printReportAll);
        reportsGrid.add(hbPrintReportAll, 3, 18, 3, 1);

        // "Administration" tab contents
        GridPane adminGrid = new GridPane();
        adminGrid.setAlignment(Pos.TOP_LEFT);
        adminGrid.setHgap(10);
        adminGrid.setVgap(10);
        adminGrid.setPadding(new Insets(10, 25, 5, 25));

        Label updateUser = new Label("Update a current user account:");
        adminGrid.add(updateUser, 0, 0);

        Label selectUser = new Label("Select user:");
        adminGrid.add(selectUser, 0, 1);

        final ArrayList<String> usernames = new ArrayList<String>();
        for (UserAndPass user : users) {
            usernames.add(user.username);
        }
        final ComboBox userList = new ComboBox();
        userList.setItems(FXCollections.observableArrayList(usernames));
        adminGrid.add(userList, 1, 1);

        final TextField username = new TextField();
        username.setPromptText("Username");
        username.setEditable(false);
        adminGrid.add(username, 0, 2, 2, 1);

        final PasswordField password = new PasswordField();
        password.setPromptText("Password");
        password.setEditable(false);
        adminGrid.add(password, 0, 3, 2, 1);

        final PasswordField confirmPassword = new PasswordField();
        confirmPassword.setPromptText("Confirm password");
        confirmPassword.setEditable(false);
        adminGrid.add(confirmPassword, 0, 4, 2, 1);

        final Text passwordMatch1 = new Text();
        passwordMatch1.setFill(Color.FIREBRICK);
        passwordMatch1.setText("Passwords do not match!");
        passwordMatch1.setVisible(false);
        adminGrid.add(passwordMatch1, 2, 4);

        final Label setAdmin = new Label("Set as administrator:");
        setAdmin.setVisible(false);
        adminGrid.add(setAdmin, 0, 5);

        final ChoiceBox isAdministrator = new ChoiceBox();
        isAdministrator.setItems(FXCollections.observableArrayList("Yes", "No"));
        isAdministrator.setVisible(false);
        adminGrid.add(isAdministrator, 1, 5);

        final Button saveUserChanges = new Button("Save Changes");
        final HBox hbSaveUserChanges = new HBox(10);
        hbSaveUserChanges.setAlignment(Pos.BOTTOM_RIGHT);
        hbSaveUserChanges.getChildren().add(saveUserChanges);
        hbSaveUserChanges.setVisible(false);
        adminGrid.add(hbSaveUserChanges, 1, 6);

        final Button deleteUser = new Button("Delete User");
        final HBox hbDeleteUser = new HBox(10);
        hbDeleteUser.setAlignment(Pos.BOTTOM_LEFT);
        hbDeleteUser.getChildren().add(deleteUser);
        hbDeleteUser.setVisible(false);
        adminGrid.add(hbDeleteUser, 0, 6);

        Label addUser = new Label("Create a new user account:");
        adminGrid.add(addUser, 0, 7);

        final TextField newUsername = new TextField();
        newUsername.setPromptText("Username");
        adminGrid.add(newUsername, 0, 8, 2, 1);

        final PasswordField newPassword = new PasswordField();
        newPassword.setPromptText("Password");
        adminGrid.add(newPassword, 0, 9, 2, 1);

        final PasswordField confirmNewPassword = new PasswordField();
        confirmNewPassword.setPromptText("Confirm password");
        adminGrid.add(confirmNewPassword, 0, 10, 2, 1);

        final Text passwordMatch2 = new Text();
        passwordMatch2.setFill(Color.FIREBRICK);
        passwordMatch2.setText("Passwords do not match!");
        passwordMatch2.setVisible(false);
        adminGrid.add(passwordMatch2, 2, 10);

        Label setAdmin2 = new Label("Set as administrator:");
        adminGrid.add(setAdmin2, 0, 11);

        final ChoiceBox isAdministrator2 = new ChoiceBox();
        isAdministrator2.setItems(FXCollections.observableArrayList("Yes", "No"));
        adminGrid.add(isAdministrator2, 1, 11);

        final Text newUserAdded = new Text();
        newUserAdded.setFill(Color.FIREBRICK);
        newUserAdded.setText("Please fill out all fields!");
        newUserAdded.setVisible(false);
        adminGrid.add(newUserAdded, 0, 12);

        Button addNewUser = new Button("Add user");
        HBox hbNewUser = new HBox(10);
        hbNewUser.setAlignment(Pos.BOTTOM_LEFT);
        hbNewUser.getChildren().add(addNewUser);
        adminGrid.add(hbNewUser, 1, 12);

        // "Manage Goals" tab contents
        GridPane manageGoalsGrid = new GridPane();
        manageGoalsGrid.setAlignment(Pos.TOP_LEFT);
        manageGoalsGrid.setHgap(10);
        manageGoalsGrid.setVgap(10);
        manageGoalsGrid.setPadding(new Insets(25, 25, 25, 25));

        Label modifyGoal = new Label("Modify an existing goal:");

        Label selectGoal = new Label("Select a goal:");

        Label createGoal = new Label("Create a new goal:");
        manageGoalsGrid.add(createGoal, 0, 1);

        final TextField createdGoal = new TextField();
        manageGoalsGrid.add(createdGoal, 1, 1);

        // Popup Window
        final PopUpWindow popup = new PopUpWindow();
        final Stage popupStage = new Stage();

        GridPane popupGrid = new GridPane();
        popupGrid.setAlignment(Pos.TOP_CENTER);
        popupGrid.setHgap(10);
        popupGrid.setVgap(10);
        popupGrid.setPadding(new Insets(10, 10, 10, 10));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));

        final Text areYouSure1 = new Text();
        areYouSure1.setFill(Color.BLACK);
        areYouSure1.setText("Are you sure you want to make these changes?");
        popupGrid.add(areYouSure1, 1, 1, 5, 1);
        areYouSure1.setVisible(false);

        final Text areYouSure2 = new Text();
        areYouSure2.setFill(Color.BLACK);
        areYouSure2.setText("Are you sure you want to delete this student?");
        popupGrid.add(areYouSure2, 1, 1, 5, 1);
        areYouSure2.setVisible(false);

        final Text areYouSure3 = new Text();
        areYouSure3.setFill(Color.BLACK);
        areYouSure3.setText("Are you sure you want to delete this user?");
        popupGrid.add(areYouSure3, 1, 1, 5, 1);
        areYouSure3.setVisible(false);

        Button yes = new Button("Yes");
        HBox hbYes = new HBox(10);
        hbYes.setAlignment(Pos.BOTTOM_RIGHT);
        hbYes.getChildren().add(yes);
        popupGrid.add(yes, 2, 3);

        Button no = new Button("No");
        HBox hbNo = new HBox(10);
        hbNo.setAlignment(Pos.BOTTOM_LEFT);
        hbNo.getChildren().add(no);
        popupGrid.add(no, 3, 3);

        yes.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                popup.setAgreeToChanges(true);
                popupStage.close();
                if (popup.isUpdatingStudent) {
                    saveChanges.fire();
                } else if (popup.isDeletingStudent) {
                    deleteStudent.fire();
                } else if (popup.isUpdatingUser) {
                    saveUserChanges.fire();
                } else {
                    deleteUser.fire();
                }
            }
        });

        no.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                popup.setAgreeToChanges(false);
                popupStage.close();
            }
        });

        final Scene popupScene = new Scene(popupGrid, 300, 100);
        primaryStage.setResizable(false);

        primaryStage.setTitle("");

        // "Edit Profiles" tab Actions
        findStudentEdit.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                firstNameField.clear();
                lastNameField.clear();
                emailField.clear();
                phoneNumberField.clear();
                displayGoal.clear();
                noteArea.clear();
                goals.getSelectionModel().clearSelection();
                goals.setValue(null);
                incompleteInput.setText("");
                saveChanges.setDisable(true);
                deleteStudent.setDisable(true);
                if (findStudentEdit.getValue() != null) {
                    firstNameField.setEditable(true);
                    lastNameField.setEditable(true);
                    emailField.setEditable(true);
                    phoneNumberField.setEditable(true);
                    noteArea.setEditable(true);
                    goals.setDisable(false);
                    saveChanges.setDisable(false);
                    deleteStudent.setDisable(false);
                    final String choice = (String) findStudentEdit.getValue();
                    int studentIndex = names.indexOf(choice);
                    firstNameField.insertText(0, students.get(studentIndex).getFirstName());
                    lastNameField.insertText(0, students.get(studentIndex).getLastName());
                    emailField.insertText(0, students.get(studentIndex).getEmail());
                    phoneNumberField.insertText(0, students.get(studentIndex).getPhoneNumber());
                    displayGoal.setText(students.get(studentIndex).goal.goal);
                    noteArea.insertText(0, students.get(studentIndex).getNotes());
                } else {
                    firstNameField.setEditable(false);
                    lastNameField.setEditable(false);
                    emailField.setEditable(false);
                    phoneNumberField.setEditable(false);
                    noteArea.setEditable(false);
                    goals.setDisable(true);
                }
            }
        });

        saveChanges.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                /*if (findStudentEdit.getValue() == null) {
                    incompleteInput.setFill(Color.FIREBRICK);
                    incompleteInput.setText("Please select a student!");
                } else*/ if (firstNameField.getLength() == 0 || lastNameField.getLength() == 0
                        || emailField.getLength() == 0 || phoneNumberField.getLength() == 0) {
                    incompleteInput.setFill(Color.FIREBRICK);
                    incompleteInput.setText("Please fill out all fields!");
                } else {
                    if (popup.agreeToChanges) {
                        int index = names.indexOf("" + ((String) findStudentEdit.getValue()));
                        names.set(index, "" + lastNameField.getText() + ", " + firstNameField.getText());
                        Student updatedStudent = new Student(lastNameField.getText(),
                                firstNameField.getText(),
                                phoneNumberField.getText(),
                                emailField.getText(), new Goal(createEmail), noteArea.getText());
                        //Update to take in general goal
                        students.set(index, updatedStudent);

                        findStudentEdit.getSelectionModel().clearSelection();
                        findStudentEdit.setValue(null);
                        findStudentGoals.getSelectionModel().clearSelection();
                        findStudentGoals.setValue(null);
                        findStudentReports.getSelectionModel().clearSelection();
                        findStudentReports.setValue(null);
                        reportTimes.getSelectionModel().clearSelection();
                        reportTimes.setValue(null);

                        incompleteInput.setText("");

                        Object[] newNames = names.toArray();
                        Arrays.sort(newNames);

                        findStudentEdit.setItems(FXCollections.observableArrayList(newNames));
                        findStudentGoals.setItems(FXCollections.observableArrayList(newNames));
                        findStudentReports.setItems(FXCollections.observableArrayList(newNames));

                        popup.setAgreeToChanges(false);
                    } else {
                        areYouSure2.setVisible(false);
                        areYouSure3.setVisible(false);
                        areYouSure1.setVisible(true);
                        popup.setDeletingStudent(false);
                        popup.setUpdatingStudent(true);
                        popup.setDeletingUser(false);
                        popup.setUpdatingUser(false);
                        popupStage.setScene(popupScene);
                        popupStage.show();
                    }
                }
            }
        });

        deleteStudent.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (popup.agreeToChanges) {
                    String currentStudent = (String) findStudentEdit.getValue();
                    int currentIndex = names.indexOf(currentStudent);
                    names.remove(currentStudent);
                    students.remove(currentIndex);
                    Object[] updatedNames = names.toArray();
                    Arrays.sort(updatedNames);
                    findStudentEdit.setItems(FXCollections.observableArrayList(updatedNames));
                    findStudentReports.setItems(FXCollections.observableArrayList(updatedNames));
                    findStudentGoals.setItems(FXCollections.observableArrayList(updatedNames));
                    popup.setAgreeToChanges(false);
                } else {
                    areYouSure1.setVisible(false);
                    areYouSure3.setVisible(false);
                    areYouSure2.setVisible(true);
                    popup.setDeletingStudent(true);
                    popup.setUpdatingStudent(false);
                    popup.setDeletingUser(false);
                    popup.setUpdatingUser(false);
                    popupStage.setScene(popupScene);
                    popupStage.show();
                }
            }
        });

        // "Student Goals" tab Actions
        final ArrayList<CheckBox> checkBoxes = new ArrayList<CheckBox>();

        findStudentGoals.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                currentStudentGoal.clear();
                int size = checkBoxes.size();
                if (size > 0) {
                    goalsGrid.getChildren().remove(hbSaveGoalChanges);
                }
                int numChildren = goalsGrid.getChildren().size();
                for (int i = 0; i < size; i++) {
                    goalsGrid.getChildren().remove(numChildren - i - 1);
                }
                checkBoxes.clear();
                if (findStudentGoals.getValue() != null) {
                    String currentStudent = (String) findStudentGoals.getValue();
                    int studentIndex = names.indexOf(currentStudent);
                    Goal currentGoal = students.get(studentIndex).goal;
                    currentStudentGoal.setText(currentGoal.goal);
                    int n = currentGoal.subgoals.size();
                    for (int i = 0; i < n; i++) {
                        CheckBox currentSubgoal = new CheckBox(currentGoal.subgoals.get(i).subgoal);
                        currentSubgoal.setSelected(currentGoal.subgoals.get(i).isComplete);
                        goalsGrid.add(currentSubgoal, 1, 5 + i, 2, 1);
                        checkBoxes.add(currentSubgoal);
                    }
                    goalsGrid.add(hbSaveGoalChanges, 1, 6 + n);
                }
            }
        });

        saveGoalChanges.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                String currentStudent = (String) findStudentGoals.getValue();
                int studentIndex = names.indexOf(currentStudent);
                Goal currentGoal = students.get(studentIndex).goal;
                int size = checkBoxes.size();
                for (int i = 0; i < size; i++) {
                    currentGoal.subgoals.get(i).setComplete(checkBoxes.get(i).isSelected());
                }
                findStudentGoals.getSelectionModel().clearSelection();
                findStudentGoals.setValue(null);
                findStudentReports.getSelectionModel().clearSelection();
                findStudentReports.setValue(null);
            }
        });

        // "New Student" tab Actions
        addStudent.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (firstNameField2.getLength() == 0 || lastNameField2.getLength() == 0
                        || emailField2.getLength() == 0 || phoneNumberField2.getLength() == 0
                        || goals2.getValue() == null) {
                    studentAdded.setFill(Color.FIREBRICK);
                    studentAdded.setText("Please fill out all fields!");
                } else {
                    names.add("" + lastNameField2.getText() + ", " + firstNameField2.getText());
                    Object[] newNames = names.toArray();
                    Arrays.sort(newNames);
                    findStudentEdit.setItems(FXCollections.observableArrayList(newNames));
                    findStudentReports.setItems(FXCollections.observableArrayList(newNames));
                    findStudentGoals.setItems(FXCollections.observableArrayList(newNames));
                    Student newStudent = new Student(lastNameField2.getText(),
                            firstNameField2.getText(),
                            phoneNumberField2.getText(),
                            emailField2.getText(), new Goal(createEmail), noteArea2.getText());
                    students.add(newStudent);
                    firstNameField2.clear();
                    lastNameField2.clear();
                    emailField2.clear();
                    phoneNumberField2.clear();
                    goals2.getSelectionModel().clearSelection();
                    goals2.setValue(null);
                    noteArea2.clear();
                    studentAdded.setText("");
                }
            }
        }
        );

        goals2.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (goals2.getValue() == null) {
                    studentAdded.setText("");
                }
            }
        });

        /* CAN FIX THIS WITH GOALS DROPDOWN
         firstNameField2.setOnAction(new EventHandler<ActionEvent>() {
         public void handle(ActionEvent t) {
         studentAdded.setText("");
         }
         });
         */
        // "Flags" tab Actions
        reportTimes.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                printBtn.setDisable(true);
                if (reportTimes.getValue() != null) {
                    printBtn.setDisable(false);
                }
            }
        });

        printBtn.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {

            }
        });

        // "Reports" tab Actions
        findStudentReports.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                studentName.clear();
                studentGoal.clear();
                goalsCompleted.setVisible(false);
                progressLabel.setVisible(false);
                goalProgress.setVisible(false);
                printReport.setDisable(true);
                completedSubgoalsList.clear();
                remainingSubgoalsList.clear();
                if (findStudentReports.getValue() != null) {
                    final String choice2 = (String) findStudentReports.getValue();
                    String firstName = choice2.substring(choice2.indexOf(" ") + 1);
                    String lastName = choice2.substring(0, choice2.indexOf(","));
                    studentName.insertText(0, firstName + " " + lastName);
                    int studentIndex = names.indexOf(choice2);
                    Student currentStudent = students.get(studentIndex);
                    studentGoal.setText(currentStudent.goal.goal);
                    goalsCompleted.setText("Goals completed: " + currentStudent.goalsCompleted);
                    int numSubgoals = currentStudent.goal.subgoals.size();
                    int numCompleted = currentStudent.goal.numCompletedSubgoals();
                    progressLabel.setText("Progress towards current goal: " + numCompleted * 100.0 / numSubgoals + "%");
                    goalProgress.setProgress(numCompleted * 1.0 / numSubgoals);
                    goalsCompleted.setVisible(true);
                    progressLabel.setVisible(true);
                    goalProgress.setVisible(true);
                    printReport.setDisable(false);
                    String completedSubgoals = "";
                    String remainingSubgoals = "";
                    for (Subgoal subgoal : currentStudent.goal.subgoals) {
                        if (subgoal.isComplete)
                            completedSubgoals += subgoal.subgoal + "\n";
                        else 
                            remainingSubgoals += subgoal.subgoal + "\n";
                    }
                    completedSubgoalsList.setText(completedSubgoals);
                    remainingSubgoalsList.setText(remainingSubgoals);
                    //studentGoal.insertText(0, "Get a job");
                }
            }
        });

        printReport.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {

            }
        });

        printReportAll.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {

            }
        });

        // "Administration" tab actions
        userList.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                username.clear();
                password.clear();
                confirmPassword.clear();
                isAdministrator.setDisable(false);
                deleteUser.setDisable(false);
                if (userList.getValue() != null) {
                    username.setEditable(true);
                    password.setEditable(true);
                    confirmPassword.setEditable(true);
                    setAdmin.setVisible(true);
                    isAdministrator.setVisible(true);
                    hbSaveUserChanges.setVisible(true);
                    hbDeleteUser.setVisible(true);
                    String currentUser = "admin";
                    //String currentUser = get currentUser from database!
                    String currentUserSelected = (String) userList.getValue();
                    int userIndex = usernames.indexOf(currentUserSelected);
                    username.insertText(0, users.get(userIndex).username);
                    password.insertText(0, users.get(userIndex).password);
                    confirmPassword.insertText(0, users.get(userIndex).password);
                    if (users.get(userIndex).isAdmin) {
                        isAdministrator.setValue("Yes");
                    } else {
                        isAdministrator.setValue("No");
                    }
                    if (currentUser.equals(currentUserSelected)) {
                        isAdministrator.setDisable(true);
                        deleteUser.setDisable(true);
                    }
                } else {
                    username.setEditable(false);
                    password.setEditable(false);
                    confirmPassword.setEditable(false);
                    setAdmin.setVisible(false);
                    isAdministrator.setVisible(false);
                    hbSaveUserChanges.setVisible(false);
                    hbDeleteUser.setVisible(false);
                }
            }
        });

        saveUserChanges.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (password.getText().equals(confirmPassword.getText())) {
                    if (popup.agreeToChanges) {
                        int userIndex = usernames.indexOf((String) userList.getValue());
                        usernames.set(userIndex, username.getText());

                        UserAndPass updatedUser = new UserAndPass(username.getText(),
                                password.getText());
                        if (((String) isAdministrator.getValue()).equals("Yes")) {
                            updatedUser.setAdmin(true);
                        } else {
                            updatedUser.setAdmin(false);
                        }
                        users.set(userIndex, updatedUser);

                        userList.getSelectionModel().clearSelection();
                        userList.setValue(null);

                        userList.setItems(FXCollections.observableArrayList(usernames));

                        popup.setAgreeToChanges(false);
                        hbSaveUserChanges.setVisible(false);
                        hbDeleteUser.setVisible(false);
                    } else {
                        passwordMatch1.setVisible(false);
                        areYouSure1.setVisible(true);
                        areYouSure2.setVisible(false);
                        areYouSure3.setVisible(false);
                        popup.setUpdatingUser(true);
                        popup.setDeletingUser(false);
                        popup.setUpdatingStudent(false);
                        popup.setDeletingStudent(false);
                        popupStage.setScene(popupScene);
                        popupStage.show();
                    }
                } else {
                    passwordMatch1.setVisible(true);
                }
            }
        });

        deleteUser.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (popup.agreeToChanges) {
                    passwordMatch1.setVisible(false);
                    String currentUser = (String) userList.getValue();
                    int userIndex = usernames.indexOf(currentUser);
                    usernames.remove(currentUser);
                    users.remove(userIndex);
                    userList.setItems(FXCollections.observableArrayList(usernames));
                    popup.setAgreeToChanges(false);
                    hbSaveUserChanges.setVisible(false);
                    hbDeleteUser.setVisible(false);
                } else {
                    areYouSure3.setVisible(true);
                    areYouSure1.setVisible(false);
                    areYouSure2.setVisible(false);
                    popup.setDeletingUser(true);
                    popup.setUpdatingUser(false);
                    popup.setDeletingStudent(false);
                    popup.setUpdatingStudent(false);
                    popupStage.setScene(popupScene);
                    popupStage.show();
                }
            }
        });

        addNewUser.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (newUsername.getLength() == 0 || newPassword.getLength() == 0
                        || confirmNewPassword.getLength() == 0
                        || isAdministrator2.getValue() == null) {
                    newUserAdded.setVisible(true);
                } else {
                    newUserAdded.setVisible(false);
                    if (newPassword.getText().equals(confirmNewPassword.getText())) {
                        UserAndPass newUser = new UserAndPass(newUsername.getText(),
                                newPassword.getText());
                        if (((String) isAdministrator2.getValue()).equals("Yes")) {
                            newUser.setAdmin(true);
                        } else {
                            newUser.setAdmin(false);
                        }
                        usernames.add(newUsername.getText());
                        users.add(newUser);
                        userList.setItems(FXCollections.observableArrayList(usernames));
                        newUsername.clear();
                        newPassword.clear();
                        confirmNewPassword.clear();
                        isAdministrator2.getSelectionModel().clearSelection();
                        isAdministrator2.setValue(null);
                    } else {
                        passwordMatch2.setVisible(true);
                    }
                }
            }
        });

        //Create Tabs
        Tab editTab = new Tab();
        editTab.setText("Edit Profiles");
        editTab.setContent(editGrid);
        tabPane.getTabs().add(editTab);

        Tab goalTab = new Tab();
        goalTab.setText("Student Goals");
        goalTab.setContent(goalsGrid);
        tabPane.getTabs().add(goalTab);

        Tab newStudentTab = new Tab();
        newStudentTab.setText("New Student");
        newStudentTab.setContent(newStudentGrid);
        tabPane.getTabs().add(newStudentTab);

        Tab flagsTab = new Tab();
        flagsTab.setText("Flags");
        flagsTab.setContent(flagsGrid);
        tabPane.getTabs().add(flagsTab);

        Tab reportsTab = new Tab();
        reportsTab.setText("Reports");
        reportsTab.setContent(reportsGrid);
        tabPane.getTabs().add(reportsTab);

        Tab adminTab = new Tab();
        adminTab.setText("Administration");
        adminTab.setContent(adminGrid);
        if (isAdmin) {
            tabPane.getTabs().add(adminTab);
        }

        Tab manageTab = new Tab();
        manageTab.setText("Manage Goals");
        manageTab.setContent(manageGoalsGrid);
        if (isAdmin) {
            tabPane.getTabs().add(manageTab);
        }

        Text scenetitle2 = new Text("Student");
        scenetitle2.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        mainPane.setCenter(tabPane);
        mainPane.setTop(scenetitle2);
        mainPane.setAlignment(scenetitle2, Pos.CENTER);
        mainPane.setMargin(scenetitle2, new Insets(10, 10, 10, 10));

        mainPane.prefHeightProperty().bind(scene.heightProperty());
        mainPane.prefWidthProperty().bind(scene.widthProperty());

        root.getChildren().add(mainPane);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

}

final class UserAndPass {

    public String username;
    public String password;
    public boolean isAdmin = false;

    public UserAndPass(String theUsername, String thePassword) {
        username = theUsername;
        password = thePassword;
    }

    public void changeUsername(String theUsername) {
        this.username = theUsername;
    }

    public void changePassword(String thePassword) {
        this.password = thePassword;
    }

    public void setAdmin(boolean b) {
        this.isAdmin = b;
    }

}

final class PopUpWindow {

    public boolean agreeToChanges = false;
    public boolean isDeletingStudent = false;
    public boolean isUpdatingStudent = false;
    public boolean isUpdatingUser = false;
    public boolean isDeletingUser = false;

    public void setAgreeToChanges(boolean b) {
        this.agreeToChanges = b;
    }

    public void setDeletingStudent(boolean b) {
        this.isDeletingStudent = b;
    }

    public void setUpdatingStudent(boolean b) {
        this.isUpdatingStudent = b;
    }

    public void setUpdatingUser(boolean b) {
        this.isUpdatingUser = b;
    }

    public void setDeletingUser(boolean b) {
        this.isDeletingUser = b;
    }
}

public class AIULogin extends Application {

    @Override
    public void start(final Stage primaryStage) {
        primaryStage.setTitle("JavaFX Welcome");

        GridPane grid = new GridPane();
        grid.setAlignment(Pos.CENTER);
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(25, 25, 25, 25));
        grid.getColumnConstraints().add(new ColumnConstraints(75));

        final ArrayList<UserAndPass> users = new ArrayList<UserAndPass>();
        UserAndPass user1 = new UserAndPass("admin", "password");
        UserAndPass user2 = new UserAndPass("mguyer", "test1234");
        user1.setAdmin(true);
        users.add(user1);
        users.add(user2);

        Text scenetitle = new Text("Welcome");
        //scenetitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        scenetitle.setId("welcome-text");
        grid.add(scenetitle, 0, 0, 2, 1);

        Label userName = new Label("User Name:");
        grid.add(userName, 0, 1);

        final TextField userTextField = new TextField();
        grid.add(userTextField, 1, 1);

        Label pw = new Label("Password:");
        grid.add(pw, 0, 2);

        final PasswordField pwBox = new PasswordField();
        grid.add(pwBox, 1, 2);

        Button btn = new Button("Sign in ");
        HBox hbBtn = new HBox(10);
        hbBtn.setAlignment(Pos.BOTTOM_RIGHT);
        hbBtn.getChildren().add(btn);
        grid.add(hbBtn, 1, 4);

        final Text loginIssue = new Text();
        grid.add(loginIssue, 0, 6, 2, 1);

        btn.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent e) {
                if (userTextField.getLength() == 0 && pwBox.getLength() == 0) {
                    loginIssue.setFill(Color.FIREBRICK);
                    loginIssue.setText("Please enter a username and password");
                } else if (userTextField.getLength() == 0) {
                    loginIssue.setFill(Color.FIREBRICK);
                    loginIssue.setText("Please enter a username");
                } else if (pwBox.getLength() == 0) {
                    loginIssue.setFill(Color.FIREBRICK);
                    loginIssue.setText("Please enter a password");
                } else {
                    boolean userFound = false;
                    for (UserAndPass user : users) {
                        if (userTextField.getText().equals(user.username)
                                && pwBox.getText().equals(user.password)) {
                            userFound = true;
                            String currentUser = user.username;
                            //Send this currentUser to database!
                            TabDemo tabDisplay = new TabDemo();
                            Stage tabStage = new Stage();
                            if (user.isAdmin) {
                                tabDisplay.setAdmin(true);
                            }
                            tabDisplay.users = users;
                            tabDisplay.start(tabStage);
                            primaryStage.close();
                            loginIssue.setText("");
                            break;
                        }
                    }
                    if (!userFound) {
                        loginIssue.setFill(Color.FIREBRICK);
                        loginIssue.setText("Invalid username and/or password");
                    }
                }

            }
        });

        Scene scene = new Scene(grid, 300, 275);
        primaryStage.setScene(scene);
        scene.getStylesheets().add(AIULogin.class.getResource("AIULogin.css").toExternalForm());
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

}
