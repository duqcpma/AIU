/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aiulogin;

import java.util.ArrayList;
import java.util.Arrays;
import javafx.application.Application;
import static javafx.application.Application.launch;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import static javafx.scene.control.TabPane.TabClosingPolicy.UNAVAILABLE;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;

/**
 *
 * @author mguyer92
 */
final class Student {

    public String lastName;
    public String firstName;
    public String phoneNumber;
    public String emailAddress;
    public int count = 0;

    public enum goal {

        COLLEGE, JOB, CITIZENSHIP, OTHER
    }; //list of common goals
    public ArrayList<goal> goalList;  //to account for multiple goals

    public Student(String theLastName, String theFirstName, String thePhoneNumber, String theEmail, goal theGoal) {
        lastName = theLastName;
        firstName = theFirstName;
        phoneNumber = thePhoneNumber;
        emailAddress = theEmail;
        count++;
        goalList = new ArrayList<>();
        goalList.add(theGoal);
    }

    public String getLastName() {
        return this.lastName;
    }

    public String getFirstName() {
        return this.firstName;
    }

    public String getFullName() {
        return (this.lastName + ", " + this.firstName);
    }

    public String getPhoneNumber() {
        return this.phoneNumber;
    }

    public String getEmail() {
        return this.emailAddress;
    }

    public ArrayList<goal> getGoals() {
        return this.goalList;
    }

    public void addGoal(goal newGoal) {
        this.goalList.add(newGoal);
    }

    public void removeGoal(goal oldGoal) {
        this.goalList.remove(oldGoal);
    }

}

final class TabDemo extends Application {

    @Override
    public void start(final Stage primaryStage) {
        primaryStage.setTitle("Tab Demo");
        primaryStage.setResizable(false);
        final Group root = new Group();
        final Scene scene = new Scene(root, 450, 500, Color.WHITE);

        TabPane tabPane = new TabPane();
        BorderPane mainPane = new BorderPane();

        tabPane.setTabClosingPolicy(UNAVAILABLE);

        boolean isAdmin = false;

        // "Edit" tab contents
        GridPane editGrid = new GridPane();
        editGrid.setAlignment(Pos.TOP_LEFT);
        editGrid.setHgap(10);
        editGrid.setVgap(10);
        editGrid.setPadding(new Insets(25, 25, 25, 25));
        editGrid.getColumnConstraints().add(new ColumnConstraints(150));
        editGrid.getColumnConstraints().add(new ColumnConstraints(20));
        editGrid.getColumnConstraints().add(new ColumnConstraints(150));

        Label selectStudent = new Label("Select student:");
        editGrid.add(selectStudent, 0, 0);

        final ArrayList<Student> students = new ArrayList<Student>();

        Student adamBaumgardner = new Student("Baumgardner", "Adam", "(412) 580-8826",
                "baumgardnera@duq.edu", Student.goal.JOB);
        Student richBoyles = new Student("Boyles", "Rich", "(724) 550-3375",
                "boylesr@duq.edu", Student.goal.JOB);
        Student mikeGuyer = new Student("Guyer", "Mike", "(570) 807-0899",
                "guyerm@duq.edu", Student.goal.JOB);
        students.add(adamBaumgardner);
        students.add(richBoyles);
        students.add(mikeGuyer);

        final ArrayList<String> names = new ArrayList<String>();

        for (Student student : students) {
            names.add(student.lastName + ", " + student.firstName);
        }

        Object[] namesArray = names.toArray();
        Arrays.sort(namesArray);

        final ComboBox findStudentEdit = new ComboBox();
        findStudentEdit.setItems(FXCollections.observableArrayList(namesArray));
        findStudentEdit.setVisibleRowCount(3);
        editGrid.add(findStudentEdit, 2, 0);

        final TextField firstNameField = new TextField();
        firstNameField.setPromptText("First Name");
        firstNameField.setEditable(false);
        editGrid.add(firstNameField, 0, 2, 1, 1);

        final TextField lastNameField = new TextField();
        lastNameField.setPromptText("Last Name");
        lastNameField.setEditable(false);
        editGrid.add(lastNameField, 0, 3, 1, 1);

        final TextField emailField = new TextField();
        emailField.setPromptText("Email Address");
        emailField.setEditable(false);
        editGrid.add(emailField, 0, 4, 1, 1);

        final TextField phoneNumberField = new TextField();
        phoneNumberField.setPromptText("Phone Number");
        phoneNumberField.setEditable(false);
        editGrid.add(phoneNumberField, 0, 5, 1, 1);

        final Label currentGoal = new Label("Current Goal: ");
        currentGoal.setAlignment(Pos.CENTER_RIGHT);
        editGrid.add(currentGoal, 2, 2);

        Label newGoal = new Label("Set a different goal: ");
        editGrid.add(newGoal, 2, 3);

        ComboBox goals = new ComboBox();
        editGrid.add(goals, 2, 4);

        Label notes = new Label("Notes:");
        editGrid.add(notes, 0, 8);

        final TextArea noteArea = new TextArea();
        noteArea.setPrefRowCount(5);
        noteArea.setEditable(false);
        editGrid.add(noteArea, 0, 9, 3, 5);

        final Button saveChanges = new Button("Save Changes");
        HBox hbSaveChanges = new HBox(10);
        hbSaveChanges.setAlignment(Pos.BOTTOM_RIGHT);
        hbSaveChanges.getChildren().add(saveChanges);
        editGrid.add(hbSaveChanges, 2, 17);

        final Button deleteStudent = new Button("Delete Student");
        final HBox hbDeleteStudent = new HBox(10);
        hbDeleteStudent.setAlignment(Pos.BOTTOM_LEFT);
        hbDeleteStudent.getChildren().add(deleteStudent);
        editGrid.add(hbDeleteStudent, 0, 17);
        hbDeleteStudent.setVisible(false);

        final Text incompleteInput = new Text();
        editGrid.add(incompleteInput, 2, 19);

        // "Goals" tab contents
        GridPane goalsGrid = new GridPane();
        goalsGrid.setAlignment(Pos.TOP_LEFT);
        goalsGrid.setHgap(10);
        goalsGrid.setVgap(10);
        goalsGrid.setPadding(new Insets(25, 25, 25, 25));
        goalsGrid.getColumnConstraints().add(new ColumnConstraints(120));
        goalsGrid.getColumnConstraints().add(new ColumnConstraints(150));

        Label studentLookUp = new Label("Select student:");
        goalsGrid.add(studentLookUp, 0, 2);

        final ComboBox findStudentGoals = new ComboBox();
        findStudentGoals.setItems(FXCollections.observableArrayList(namesArray));
        findStudentGoals.setVisibleRowCount(3);
        goalsGrid.add(findStudentGoals, 1, 2);

        TextField addGoalText = new TextField();
        addGoalText.setPromptText("Add a Goal");
        goalsGrid.add(addGoalText, 2, 3);

        Button addGoal = new Button("Add Goal to List");
        HBox hbAddGoal = new HBox(10);
        hbAddGoal.setAlignment(Pos.BOTTOM_RIGHT);
        hbAddGoal.getChildren().add(addGoal);
        goalsGrid.add(hbAddGoal, 2, 4);

        // "New Student" tab contents
        GridPane newStudentGrid = new GridPane();
        newStudentGrid.setAlignment(Pos.TOP_LEFT);
        newStudentGrid.setHgap(10);
        newStudentGrid.setVgap(10);
        newStudentGrid.setPadding(new Insets(25, 25, 25, 25));
        newStudentGrid.getColumnConstraints().add(new ColumnConstraints(150));
        newStudentGrid.getColumnConstraints().add(new ColumnConstraints(20));
        newStudentGrid.getColumnConstraints().add(new ColumnConstraints(150));

        final TextField firstNameField2 = new TextField();
        firstNameField2.setPromptText("First Name");
        newStudentGrid.add(firstNameField2, 0, 2, 1, 1);

        final TextField lastNameField2 = new TextField();
        lastNameField2.setPromptText("Last Name");
        newStudentGrid.add(lastNameField2, 0, 3, 1, 1);

        final TextField emailField2 = new TextField();
        emailField2.setPromptText("Email Address");
        newStudentGrid.add(emailField2, 0, 4, 1, 1);

        final TextField phoneNumberField2 = new TextField();
        phoneNumberField2.setPromptText("Phone Number");
        newStudentGrid.add(phoneNumberField2, 0, 5, 1, 1);

        Label goalSelection = new Label("Select a goal:");
        newStudentGrid.add(goalSelection, 2, 2);

        ComboBox goals2 = new ComboBox();
        newStudentGrid.add(goals2, 2, 3);

        Label notes2 = new Label("Notes:");
        newStudentGrid.add(notes2, 0, 8);

        TextArea noteArea2 = new TextArea();
        noteArea2.setPrefRowCount(5);
        newStudentGrid.add(noteArea2, 0, 9, 3, 5);

        Button addStudent = new Button("Add Student");
        HBox hbAddStudent = new HBox(10);
        hbAddStudent.setAlignment(Pos.BOTTOM_RIGHT);
        hbAddStudent.getChildren().add(addStudent);
        newStudentGrid.add(hbAddStudent, 2, 17);

        final Text studentAdded = new Text();
        newStudentGrid.add(studentAdded, 2, 19);

        // "Flags" tab contents
        GridPane flagsGrid = new GridPane();
        flagsGrid.setAlignment(Pos.TOP_LEFT);
        flagsGrid.setHgap(10);
        flagsGrid.setVgap(10);
        flagsGrid.setPadding(new Insets(25, 25, 25, 25));
        flagsGrid.getColumnConstraints().add(new ColumnConstraints(200));

        Label unreportedStudents = new Label("Students who have not reported in:");
        flagsGrid.add(unreportedStudents, 0, 8, 1, 1);

        ChoiceBox reportTimes = new ChoiceBox();
        reportTimes.setItems(FXCollections.observableArrayList("12 Hours", "30 Hours",
                "60 Hours"));
        flagsGrid.add(reportTimes, 1, 8);

        TextArea studentList = new TextArea();
        studentList.setPrefRowCount(6);
        studentList.setEditable(false);
        flagsGrid.add(studentList, 0, 9, 2, 6);

        Button printBtn = new Button("Print");
        HBox hbPrint = new HBox(10);
        hbPrint.setAlignment(Pos.BOTTOM_RIGHT);
        hbPrint.getChildren().add(printBtn);
        flagsGrid.add(hbPrint, 1, 17);

        // "Reports" tab contents
        GridPane reportsGrid = new GridPane();
        reportsGrid.setAlignment(Pos.TOP_LEFT);
        reportsGrid.setHgap(10);
        reportsGrid.setVgap(10);
        reportsGrid.setPadding(new Insets(25, 25, 25, 25));
        reportsGrid.getColumnConstraints().add(new ColumnConstraints(150));
        reportsGrid.getColumnConstraints().add(new ColumnConstraints(50));

        Label selectStudent2 = new Label("Select student:");
        reportsGrid.add(selectStudent2, 0, 2);

        final ComboBox findStudentReports = new ComboBox();
        findStudentReports.setItems(FXCollections.observableArrayList(namesArray));
        findStudentReports.setVisibleRowCount(3);
        reportsGrid.add(findStudentReports, 0, 3);

        Button printReport = new Button("Print Individual Report");
        HBox hbPrintReport = new HBox(10);
        hbPrintReport.setAlignment(Pos.BOTTOM_RIGHT);
        hbPrintReport.getChildren().add(printReport);
        reportsGrid.add(hbPrintReport, 0, 7);

        final TextField studentName = new TextField();
        studentName.setPromptText("Student Name");
        studentName.setEditable(false);
        reportsGrid.add(studentName, 2, 2);

        final TextField studentGoal = new TextField();
        studentGoal.setPromptText("Current Student Goal");
        studentGoal.setEditable(false);
        reportsGrid.add(studentGoal, 2, 3);

        final Label goalsCompleted = new Label("Goals completed: 0");
        reportsGrid.add(goalsCompleted, 2, 6);

        final Label progressLabel = new Label("Progress towards current goal: 25%");
        reportsGrid.add(progressLabel, 2, 8);

        final ProgressBar goalProgress = new ProgressBar(0.25);
        reportsGrid.add(goalProgress, 2, 9);

        Button printReportAll = new Button("Print Report on All Students");
        HBox hbPrintReportAll = new HBox(10);
        hbPrintReportAll.setAlignment(Pos.BOTTOM_RIGHT);
        hbPrintReportAll.getChildren().add(printReportAll);
        reportsGrid.add(hbPrintReportAll, 2, 22);

        // "Administration" tab contents
        GridPane adminGrid = new GridPane();
        adminGrid.setAlignment(Pos.TOP_LEFT);
        adminGrid.setHgap(10);
        adminGrid.setVgap(10);
        adminGrid.setPadding(new Insets(25, 25, 25, 25));

        // "Edit" tab Actions
        final PopUpWindow popup = new PopUpWindow();
        final Stage popupStage = new Stage();

        GridPane popupGrid = new GridPane();
        popupGrid.setAlignment(Pos.TOP_CENTER);
        popupGrid.setHgap(10);
        popupGrid.setVgap(10);
        popupGrid.setPadding(new Insets(10, 10, 10, 10));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));
        popupGrid.getColumnConstraints().add(new ColumnConstraints(50));

        final Text areYouSure1 = new Text();
        areYouSure1.setFill(Color.BLACK);
        areYouSure1.setText("Are you sure you want to make these changes?");
        popupGrid.add(areYouSure1, 1, 1, 5, 1);
        areYouSure1.setVisible(false);

        final Text areYouSure2 = new Text();
        areYouSure2.setFill(Color.BLACK);
        areYouSure2.setText("Are you sure you want to delete this student?");
        popupGrid.add(areYouSure2, 1, 1, 5, 1);
        areYouSure2.setVisible(false);

        Button yes = new Button("Yes");
        HBox hbYes = new HBox(10);
        hbYes.setAlignment(Pos.BOTTOM_RIGHT);
        hbYes.getChildren().add(yes);
        popupGrid.add(yes, 2, 3);

        Button no = new Button("No");
        HBox hbNo = new HBox(10);
        hbNo.setAlignment(Pos.BOTTOM_LEFT);
        hbNo.getChildren().add(no);
        popupGrid.add(no, 3, 3);

        yes.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                popup.setAgreeToChanges(true);
                popupStage.close();
                if (popup.isUpdating)
                    saveChanges.fire();
                else
                    deleteStudent.fire();
            }
        });

        no.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                popup.setAgreeToChanges(false);
                popupStage.close();
            }
        });

        final Scene popupScene = new Scene(popupGrid, 300, 100);
        primaryStage.setResizable(false);

        primaryStage.setTitle("");

        findStudentEdit.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                firstNameField.clear();
                lastNameField.clear();
                emailField.clear();
                phoneNumberField.clear();
                noteArea.clear();
                incompleteInput.setText("");
                if (findStudentEdit.getValue() != null) {
                    firstNameField.setEditable(true);
                    lastNameField.setEditable(true);
                    emailField.setEditable(true);
                    phoneNumberField.setEditable(true);
                    noteArea.setEditable(true);
                    hbDeleteStudent.setVisible(true);
                    final String choice = (String) findStudentEdit.getValue();
                    int studentIndex = names.indexOf(choice);
                    firstNameField.insertText(0, students.get(studentIndex).getFirstName());
                    lastNameField.insertText(0, students.get(studentIndex).getLastName());
                    emailField.insertText(0, students.get(studentIndex).getEmail());
                    phoneNumberField.insertText(0, students.get(studentIndex).getPhoneNumber());
                } else {
                    firstNameField.setEditable(false);
                    lastNameField.setEditable(false);
                    emailField.setEditable(false);
                    phoneNumberField.setEditable(false);
                    noteArea.setEditable(false);
                }
            }
        });

        saveChanges.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (findStudentEdit.getValue() == null) {
                    incompleteInput.setFill(Color.FIREBRICK);
                    incompleteInput.setText("Please select a student!");
                } else if (firstNameField.getLength() == 0 || lastNameField.getLength() == 0
                        || emailField.getLength() == 0 || phoneNumberField.getLength() == 0) {
                    incompleteInput.setFill(Color.FIREBRICK);
                    incompleteInput.setText("Please fill out all fields!");
                } else {
                    if (popup.agreeToChanges) {
                        int index = names.indexOf("" + ((String) findStudentEdit.getValue()));
                        names.set(index, "" + lastNameField.getText() + ", " + firstNameField.getText());
                        Student updatedStudent = new Student(lastNameField.getText(),
                                firstNameField.getText(),
                                phoneNumberField.getText(),
                                emailField.getText(), Student.goal.JOB);
                        students.set(index, updatedStudent);

                        findStudentEdit.getSelectionModel().clearSelection();
                        findStudentEdit.setValue(null);

                        incompleteInput.setText("");

                        Object[] newNames = names.toArray();
                        Arrays.sort(newNames);

                        findStudentEdit.setItems(FXCollections.observableArrayList(newNames));
                        findStudentGoals.setItems(FXCollections.observableArrayList(newNames));
                        findStudentReports.setItems(FXCollections.observableArrayList(newNames));

                        popup.setAgreeToChanges(false);
                        hbDeleteStudent.setVisible(false);
                    } else {
                        areYouSure2.setVisible(false);
                        areYouSure1.setVisible(true);
                        popup.setDeleting(false);
                        popup.setUpdating(true);
                        popupStage.setScene(popupScene);
                        popupStage.show();
                    }
                }
            }
        });

        deleteStudent.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (popup.agreeToChanges) {
                String currentStudent = (String) findStudentEdit.getValue();
                int currentIndex = names.indexOf(currentStudent);
                names.remove(currentStudent);
                students.remove(currentIndex);
                Object[] updatedNames = names.toArray();
                Arrays.sort(updatedNames);
                findStudentEdit.setItems(FXCollections.observableArrayList(updatedNames));
                findStudentReports.setItems(FXCollections.observableArrayList(updatedNames));
                findStudentGoals.setItems(FXCollections.observableArrayList(updatedNames));
                hbDeleteStudent.setVisible(false);
                popup.setAgreeToChanges(false);
                }
                else {
                    areYouSure1.setVisible(false);
                    areYouSure2.setVisible(true);
                    popup.setDeleting(true);
                    popup.setUpdating(false);
                    popupStage.setScene(popupScene);
                    popupStage.show();
                }
            }
        });

        // "Goals" tab Actions
        // "New Student" tab Actions
        addStudent.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent t) {
                if (firstNameField2.getLength() == 0 || lastNameField2.getLength() == 0
                        || emailField2.getLength() == 0 || phoneNumberField2.getLength() == 0) {
                    studentAdded.setFill(Color.FIREBRICK);
                    studentAdded.setText("Please fill out all fields!");
                } else {
                    names.add("" + lastNameField2.getText() + ", " + firstNameField2.getText());
                    Object[] newNames = names.toArray();
                    Arrays.sort(newNames);
                    findStudentEdit.setItems(FXCollections.observableArrayList(newNames));
                    findStudentReports.setItems(FXCollections.observableArrayList(newNames));
                    findStudentGoals.setItems(FXCollections.observableArrayList(newNames));
                    Student newStudent = new Student(lastNameField2.getText(),
                            firstNameField2.getText(),
                            phoneNumberField2.getText(),
                            emailField2.getText(), Student.goal.JOB);
                    students.add(newStudent);
                    firstNameField2.clear();
                    lastNameField2.clear();
                    emailField2.clear();
                    phoneNumberField2.clear();
                    studentAdded.setText("");
                }
            }
        }
        );

        /*
         firstNameField2.setOnAction(new EventHandler<ActionEvent>() {
         public void handle(ActionEvent t) {
         studentAdded.setText("");
         }
         });
         */
        // "Flags" tab Actions
        // "Reports" tab Actions
        findStudentReports.setOnAction(new EventHandler<ActionEvent>() {

            public void handle(ActionEvent t) {
                studentName.clear();
                studentGoal.clear();
                if (findStudentReports.getValue() != null) {
                    final String choice2 = (String) findStudentReports.getValue();
                    String firstName = choice2.substring(choice2.indexOf(" ") + 1);
                    String lastName = choice2.substring(0, choice2.indexOf(","));
                    studentName.insertText(0, firstName + " " + lastName);
                    studentGoal.insertText(0, "Get a job");
                }
            }
        });

        //Create Tabs
        Tab editTab = new Tab();
        editTab.setText("Edit");
        editTab.setContent(editGrid);
        tabPane.getTabs().add(editTab);

        Tab goalTab = new Tab();
        goalTab.setText("Goals");
        goalTab.setContent(goalsGrid);
        tabPane.getTabs().add(goalTab);

        Tab newStudentTab = new Tab();
        newStudentTab.setText("New Student");
        newStudentTab.setContent(newStudentGrid);
        tabPane.getTabs().add(newStudentTab);

        Tab flagsTab = new Tab();
        flagsTab.setText("Flags");
        flagsTab.setContent(flagsGrid);
        tabPane.getTabs().add(flagsTab);

        Tab reportsTab = new Tab();
        reportsTab.setText("Reports");
        reportsTab.setContent(reportsGrid);
        tabPane.getTabs().add(reportsTab);

        Tab adminTab = new Tab();
        adminTab.setText("Administration");
        adminTab.setContent(adminGrid);
        if (isAdmin) {
            tabPane.getTabs().add(adminTab);
        }

        Text scenetitle2 = new Text("Student");
        scenetitle2.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        mainPane.setCenter(tabPane);
        mainPane.setTop(scenetitle2);
        mainPane.setAlignment(scenetitle2, Pos.CENTER);
        mainPane.setMargin(scenetitle2, new Insets(10, 10, 10, 10));

        mainPane.prefHeightProperty().bind(scene.heightProperty());
        mainPane.prefWidthProperty().bind(scene.widthProperty());

        root.getChildren().add(mainPane);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

}

final class UserAndPass {

    public String username;
    public String password;

    public UserAndPass(String theUsername, String thePassword) {
        username = theUsername;
        password = thePassword;
    }

    public void changeUsername(String theUsername) {
        this.username = theUsername;
    }

    public void changePassword(String thePassword) {
        this.password = thePassword;
    }

}

final class PopUpWindow {

    public boolean agreeToChanges = false;
    public boolean isDeleting = false;
    public boolean isUpdating = false;
    

    public void setAgreeToChanges(boolean b) {
        this.agreeToChanges = b;
    }
    
    public void setDeleting(boolean b) {
        this.isDeleting = b;
    }
    
    public void setUpdating(boolean b) {
        this.isUpdating = b;
    }

}

public class AIULogin extends Application {

    @Override
    public void start(final Stage primaryStage) {
        primaryStage.setTitle("JavaFX Welcome");

        GridPane grid = new GridPane();
        grid.setAlignment(Pos.CENTER);
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(25, 25, 25, 25));
        grid.getColumnConstraints().add(new ColumnConstraints(75));

        final ArrayList<UserAndPass> users = new ArrayList<UserAndPass>();
        UserAndPass user1 = new UserAndPass("admin", "password");
        users.add(user1);

        Text scenetitle = new Text("Welcome");
        //scenetitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        scenetitle.setId("welcome-text");
        grid.add(scenetitle, 0, 0, 2, 1);

        Label userName = new Label("User Name:");
        grid.add(userName, 0, 1);

        final TextField userTextField = new TextField();
        grid.add(userTextField, 1, 1);

        Label pw = new Label("Password:");
        grid.add(pw, 0, 2);

        final PasswordField pwBox = new PasswordField();
        grid.add(pwBox, 1, 2);

        Button btn = new Button("Sign in ");
        HBox hbBtn = new HBox(10);
        hbBtn.setAlignment(Pos.BOTTOM_RIGHT);
        hbBtn.getChildren().add(btn);
        grid.add(hbBtn, 1, 4);

        final Text loginIssue = new Text();
        grid.add(loginIssue, 0, 6, 2, 1);

        btn.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent e) {
                if (userTextField.getLength() == 0 && pwBox.getLength() == 0) {
                    loginIssue.setFill(Color.FIREBRICK);
                    loginIssue.setText("Please enter a username and password");
                } else if (userTextField.getLength() == 0) {
                    loginIssue.setFill(Color.FIREBRICK);
                    loginIssue.setText("Please enter a username");
                } else if (pwBox.getLength() == 0) {
                    loginIssue.setFill(Color.FIREBRICK);
                    loginIssue.setText("Please enter a password");
                } else {
                    boolean userFound = false;
                    for (UserAndPass user : users) {
                        if (userTextField.getText().equals(user.username)
                                && pwBox.getText().equals(user.password)) {
                            userFound = true;
                            TabDemo tabDisplay = new TabDemo();
                            Stage tabStage = new Stage();
                            tabDisplay.start(tabStage);
                            primaryStage.close();
                            loginIssue.setText("");
                            break;
                        }
                    }
                    if (!userFound) {
                        loginIssue.setFill(Color.FIREBRICK);
                        loginIssue.setText("Invalid username and/or password");
                    }
                }

            }
        });

        Scene scene = new Scene(grid, 300, 275);
        primaryStage.setScene(scene);
        scene.getStylesheets().add(AIULogin.class.getResource("AIULogin.css").toExternalForm());
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

}
